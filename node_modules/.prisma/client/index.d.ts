
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Style
 * 
 */
export type Style = $Result.DefaultSelection<Prisma.$StylePayload>
/**
 * Model UserStyle
 * 
 */
export type UserStyle = $Result.DefaultSelection<Prisma.$UserStylePayload>
/**
 * Model Activation
 * 
 */
export type Activation = $Result.DefaultSelection<Prisma.$ActivationPayload>
/**
 * Model Player
 * 
 */
export type Player = $Result.DefaultSelection<Prisma.$PlayerPayload>
/**
 * Model Match
 * 
 */
export type Match = $Result.DefaultSelection<Prisma.$MatchPayload>
/**
 * Model Preorder
 * 
 */
export type Preorder = $Result.DefaultSelection<Prisma.$PreorderPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Rarity: {
  COMMON: 'COMMON',
  RARE: 'RARE',
  LEGENDARY: 'LEGENDARY',
  MYTHIC: 'MYTHIC'
};

export type Rarity = (typeof Rarity)[keyof typeof Rarity]


export const PackType: {
  STARTER: 'STARTER',
  PREMIUM: 'PREMIUM',
  LEGENDARY: 'LEGENDARY'
};

export type PackType = (typeof PackType)[keyof typeof PackType]


export const OrderStatus: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]

}

export type Rarity = $Enums.Rarity

export const Rarity: typeof $Enums.Rarity

export type PackType = $Enums.PackType

export const PackType: typeof $Enums.PackType

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.style`: Exposes CRUD operations for the **Style** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Styles
    * const styles = await prisma.style.findMany()
    * ```
    */
  get style(): Prisma.StyleDelegate<ExtArgs>;

  /**
   * `prisma.userStyle`: Exposes CRUD operations for the **UserStyle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserStyles
    * const userStyles = await prisma.userStyle.findMany()
    * ```
    */
  get userStyle(): Prisma.UserStyleDelegate<ExtArgs>;

  /**
   * `prisma.activation`: Exposes CRUD operations for the **Activation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activations
    * const activations = await prisma.activation.findMany()
    * ```
    */
  get activation(): Prisma.ActivationDelegate<ExtArgs>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<ExtArgs>;

  /**
   * `prisma.preorder`: Exposes CRUD operations for the **Preorder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Preorders
    * const preorders = await prisma.preorder.findMany()
    * ```
    */
  get preorder(): Prisma.PreorderDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Style: 'Style',
    UserStyle: 'UserStyle',
    Activation: 'Activation',
    Player: 'Player',
    Match: 'Match',
    Preorder: 'Preorder'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "style" | "userStyle" | "activation" | "player" | "match" | "preorder"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Style: {
        payload: Prisma.$StylePayload<ExtArgs>
        fields: Prisma.StyleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StyleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StyleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          findFirst: {
            args: Prisma.StyleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StyleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          findMany: {
            args: Prisma.StyleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>[]
          }
          create: {
            args: Prisma.StyleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          createMany: {
            args: Prisma.StyleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StyleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>[]
          }
          delete: {
            args: Prisma.StyleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          update: {
            args: Prisma.StyleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          deleteMany: {
            args: Prisma.StyleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StyleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StyleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          aggregate: {
            args: Prisma.StyleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStyle>
          }
          groupBy: {
            args: Prisma.StyleGroupByArgs<ExtArgs>
            result: $Utils.Optional<StyleGroupByOutputType>[]
          }
          count: {
            args: Prisma.StyleCountArgs<ExtArgs>
            result: $Utils.Optional<StyleCountAggregateOutputType> | number
          }
        }
      }
      UserStyle: {
        payload: Prisma.$UserStylePayload<ExtArgs>
        fields: Prisma.UserStyleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserStyleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStylePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserStyleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStylePayload>
          }
          findFirst: {
            args: Prisma.UserStyleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStylePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserStyleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStylePayload>
          }
          findMany: {
            args: Prisma.UserStyleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStylePayload>[]
          }
          create: {
            args: Prisma.UserStyleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStylePayload>
          }
          createMany: {
            args: Prisma.UserStyleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserStyleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStylePayload>[]
          }
          delete: {
            args: Prisma.UserStyleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStylePayload>
          }
          update: {
            args: Prisma.UserStyleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStylePayload>
          }
          deleteMany: {
            args: Prisma.UserStyleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserStyleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserStyleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStylePayload>
          }
          aggregate: {
            args: Prisma.UserStyleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserStyle>
          }
          groupBy: {
            args: Prisma.UserStyleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserStyleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserStyleCountArgs<ExtArgs>
            result: $Utils.Optional<UserStyleCountAggregateOutputType> | number
          }
        }
      }
      Activation: {
        payload: Prisma.$ActivationPayload<ExtArgs>
        fields: Prisma.ActivationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivationPayload>
          }
          findFirst: {
            args: Prisma.ActivationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivationPayload>
          }
          findMany: {
            args: Prisma.ActivationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivationPayload>[]
          }
          create: {
            args: Prisma.ActivationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivationPayload>
          }
          createMany: {
            args: Prisma.ActivationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivationPayload>[]
          }
          delete: {
            args: Prisma.ActivationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivationPayload>
          }
          update: {
            args: Prisma.ActivationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivationPayload>
          }
          deleteMany: {
            args: Prisma.ActivationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActivationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivationPayload>
          }
          aggregate: {
            args: Prisma.ActivationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivation>
          }
          groupBy: {
            args: Prisma.ActivationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivationCountArgs<ExtArgs>
            result: $Utils.Optional<ActivationCountAggregateOutputType> | number
          }
        }
      }
      Player: {
        payload: Prisma.$PlayerPayload<ExtArgs>
        fields: Prisma.PlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
      Match: {
        payload: Prisma.$MatchPayload<ExtArgs>
        fields: Prisma.MatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findFirst: {
            args: Prisma.MatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findMany: {
            args: Prisma.MatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          create: {
            args: Prisma.MatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          createMany: {
            args: Prisma.MatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          delete: {
            args: Prisma.MatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          update: {
            args: Prisma.MatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          deleteMany: {
            args: Prisma.MatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.MatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchCountArgs<ExtArgs>
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      Preorder: {
        payload: Prisma.$PreorderPayload<ExtArgs>
        fields: Prisma.PreorderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreorderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreorderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderPayload>
          }
          findFirst: {
            args: Prisma.PreorderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreorderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderPayload>
          }
          findMany: {
            args: Prisma.PreorderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderPayload>[]
          }
          create: {
            args: Prisma.PreorderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderPayload>
          }
          createMany: {
            args: Prisma.PreorderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreorderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderPayload>[]
          }
          delete: {
            args: Prisma.PreorderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderPayload>
          }
          update: {
            args: Prisma.PreorderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderPayload>
          }
          deleteMany: {
            args: Prisma.PreorderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreorderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PreorderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreorderPayload>
          }
          aggregate: {
            args: Prisma.PreorderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreorder>
          }
          groupBy: {
            args: Prisma.PreorderGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreorderGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreorderCountArgs<ExtArgs>
            result: $Utils.Optional<PreorderCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    userStyles: number
    preorders: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userStyles?: boolean | UserCountOutputTypeCountUserStylesArgs
    preorders?: boolean | UserCountOutputTypeCountPreordersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserStylesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStyleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPreordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreorderWhereInput
  }


  /**
   * Count Type StyleCountOutputType
   */

  export type StyleCountOutputType = {
    userStyles: number
    activations: number
  }

  export type StyleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userStyles?: boolean | StyleCountOutputTypeCountUserStylesArgs
    activations?: boolean | StyleCountOutputTypeCountActivationsArgs
  }

  // Custom InputTypes
  /**
   * StyleCountOutputType without action
   */
  export type StyleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleCountOutputType
     */
    select?: StyleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StyleCountOutputType without action
   */
  export type StyleCountOutputTypeCountUserStylesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStyleWhereInput
  }

  /**
   * StyleCountOutputType without action
   */
  export type StyleCountOutputTypeCountActivationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    totalPoints: number | null
  }

  export type UserSumAggregateOutputType = {
    totalPoints: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    walletAddress: string | null
    totalPoints: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    walletAddress: string | null
    totalPoints: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    walletAddress: number
    totalPoints: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    totalPoints?: true
  }

  export type UserSumAggregateInputType = {
    totalPoints?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    walletAddress?: true
    totalPoints?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    walletAddress?: true
    totalPoints?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    walletAddress?: true
    totalPoints?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    password: string
    walletAddress: string | null
    totalPoints: number
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    walletAddress?: boolean
    totalPoints?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userStyles?: boolean | User$userStylesArgs<ExtArgs>
    preorders?: boolean | User$preordersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    walletAddress?: boolean
    totalPoints?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    walletAddress?: boolean
    totalPoints?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userStyles?: boolean | User$userStylesArgs<ExtArgs>
    preorders?: boolean | User$preordersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      userStyles: Prisma.$UserStylePayload<ExtArgs>[]
      preorders: Prisma.$PreorderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      password: string
      walletAddress: string | null
      totalPoints: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userStyles<T extends User$userStylesArgs<ExtArgs> = {}>(args?: Subset<T, User$userStylesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStylePayload<ExtArgs>, T, "findMany"> | Null>
    preorders<T extends User$preordersArgs<ExtArgs> = {}>(args?: Subset<T, User$preordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreorderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly walletAddress: FieldRef<"User", 'String'>
    readonly totalPoints: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.userStyles
   */
  export type User$userStylesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStyle
     */
    select?: UserStyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStyleInclude<ExtArgs> | null
    where?: UserStyleWhereInput
    orderBy?: UserStyleOrderByWithRelationInput | UserStyleOrderByWithRelationInput[]
    cursor?: UserStyleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStyleScalarFieldEnum | UserStyleScalarFieldEnum[]
  }

  /**
   * User.preorders
   */
  export type User$preordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preorder
     */
    select?: PreorderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderInclude<ExtArgs> | null
    where?: PreorderWhereInput
    orderBy?: PreorderOrderByWithRelationInput | PreorderOrderByWithRelationInput[]
    cursor?: PreorderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PreorderScalarFieldEnum | PreorderScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Style
   */

  export type AggregateStyle = {
    _count: StyleCountAggregateOutputType | null
    _avg: StyleAvgAggregateOutputType | null
    _sum: StyleSumAggregateOutputType | null
    _min: StyleMinAggregateOutputType | null
    _max: StyleMaxAggregateOutputType | null
  }

  export type StyleAvgAggregateOutputType = {
    totalPoints: number | null
    activationCount: number | null
  }

  export type StyleSumAggregateOutputType = {
    totalPoints: number | null
    activationCount: number | null
  }

  export type StyleMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    rarity: $Enums.Rarity | null
    category: string | null
    imageUrl: string | null
    totalPoints: number | null
    activationCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StyleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    rarity: $Enums.Rarity | null
    category: string | null
    imageUrl: string | null
    totalPoints: number | null
    activationCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StyleCountAggregateOutputType = {
    id: number
    name: number
    description: number
    rarity: number
    category: number
    imageUrl: number
    totalPoints: number
    activationCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StyleAvgAggregateInputType = {
    totalPoints?: true
    activationCount?: true
  }

  export type StyleSumAggregateInputType = {
    totalPoints?: true
    activationCount?: true
  }

  export type StyleMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    rarity?: true
    category?: true
    imageUrl?: true
    totalPoints?: true
    activationCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StyleMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    rarity?: true
    category?: true
    imageUrl?: true
    totalPoints?: true
    activationCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StyleCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    rarity?: true
    category?: true
    imageUrl?: true
    totalPoints?: true
    activationCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StyleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Style to aggregate.
     */
    where?: StyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Styles to fetch.
     */
    orderBy?: StyleOrderByWithRelationInput | StyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Styles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Styles
    **/
    _count?: true | StyleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StyleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StyleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StyleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StyleMaxAggregateInputType
  }

  export type GetStyleAggregateType<T extends StyleAggregateArgs> = {
        [P in keyof T & keyof AggregateStyle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStyle[P]>
      : GetScalarType<T[P], AggregateStyle[P]>
  }




  export type StyleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StyleWhereInput
    orderBy?: StyleOrderByWithAggregationInput | StyleOrderByWithAggregationInput[]
    by: StyleScalarFieldEnum[] | StyleScalarFieldEnum
    having?: StyleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StyleCountAggregateInputType | true
    _avg?: StyleAvgAggregateInputType
    _sum?: StyleSumAggregateInputType
    _min?: StyleMinAggregateInputType
    _max?: StyleMaxAggregateInputType
  }

  export type StyleGroupByOutputType = {
    id: string
    name: string
    description: string
    rarity: $Enums.Rarity
    category: string
    imageUrl: string | null
    totalPoints: number
    activationCount: number
    createdAt: Date
    updatedAt: Date
    _count: StyleCountAggregateOutputType | null
    _avg: StyleAvgAggregateOutputType | null
    _sum: StyleSumAggregateOutputType | null
    _min: StyleMinAggregateOutputType | null
    _max: StyleMaxAggregateOutputType | null
  }

  type GetStyleGroupByPayload<T extends StyleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StyleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StyleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StyleGroupByOutputType[P]>
            : GetScalarType<T[P], StyleGroupByOutputType[P]>
        }
      >
    >


  export type StyleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    rarity?: boolean
    category?: boolean
    imageUrl?: boolean
    totalPoints?: boolean
    activationCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userStyles?: boolean | Style$userStylesArgs<ExtArgs>
    activations?: boolean | Style$activationsArgs<ExtArgs>
    _count?: boolean | StyleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["style"]>

  export type StyleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    rarity?: boolean
    category?: boolean
    imageUrl?: boolean
    totalPoints?: boolean
    activationCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["style"]>

  export type StyleSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    rarity?: boolean
    category?: boolean
    imageUrl?: boolean
    totalPoints?: boolean
    activationCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StyleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userStyles?: boolean | Style$userStylesArgs<ExtArgs>
    activations?: boolean | Style$activationsArgs<ExtArgs>
    _count?: boolean | StyleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StyleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StylePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Style"
    objects: {
      userStyles: Prisma.$UserStylePayload<ExtArgs>[]
      activations: Prisma.$ActivationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      rarity: $Enums.Rarity
      category: string
      imageUrl: string | null
      totalPoints: number
      activationCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["style"]>
    composites: {}
  }

  type StyleGetPayload<S extends boolean | null | undefined | StyleDefaultArgs> = $Result.GetResult<Prisma.$StylePayload, S>

  type StyleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StyleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StyleCountAggregateInputType | true
    }

  export interface StyleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Style'], meta: { name: 'Style' } }
    /**
     * Find zero or one Style that matches the filter.
     * @param {StyleFindUniqueArgs} args - Arguments to find a Style
     * @example
     * // Get one Style
     * const style = await prisma.style.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StyleFindUniqueArgs>(args: SelectSubset<T, StyleFindUniqueArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Style that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StyleFindUniqueOrThrowArgs} args - Arguments to find a Style
     * @example
     * // Get one Style
     * const style = await prisma.style.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StyleFindUniqueOrThrowArgs>(args: SelectSubset<T, StyleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Style that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleFindFirstArgs} args - Arguments to find a Style
     * @example
     * // Get one Style
     * const style = await prisma.style.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StyleFindFirstArgs>(args?: SelectSubset<T, StyleFindFirstArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Style that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleFindFirstOrThrowArgs} args - Arguments to find a Style
     * @example
     * // Get one Style
     * const style = await prisma.style.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StyleFindFirstOrThrowArgs>(args?: SelectSubset<T, StyleFindFirstOrThrowArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Styles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Styles
     * const styles = await prisma.style.findMany()
     * 
     * // Get first 10 Styles
     * const styles = await prisma.style.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const styleWithIdOnly = await prisma.style.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StyleFindManyArgs>(args?: SelectSubset<T, StyleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Style.
     * @param {StyleCreateArgs} args - Arguments to create a Style.
     * @example
     * // Create one Style
     * const Style = await prisma.style.create({
     *   data: {
     *     // ... data to create a Style
     *   }
     * })
     * 
     */
    create<T extends StyleCreateArgs>(args: SelectSubset<T, StyleCreateArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Styles.
     * @param {StyleCreateManyArgs} args - Arguments to create many Styles.
     * @example
     * // Create many Styles
     * const style = await prisma.style.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StyleCreateManyArgs>(args?: SelectSubset<T, StyleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Styles and returns the data saved in the database.
     * @param {StyleCreateManyAndReturnArgs} args - Arguments to create many Styles.
     * @example
     * // Create many Styles
     * const style = await prisma.style.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Styles and only return the `id`
     * const styleWithIdOnly = await prisma.style.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StyleCreateManyAndReturnArgs>(args?: SelectSubset<T, StyleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Style.
     * @param {StyleDeleteArgs} args - Arguments to delete one Style.
     * @example
     * // Delete one Style
     * const Style = await prisma.style.delete({
     *   where: {
     *     // ... filter to delete one Style
     *   }
     * })
     * 
     */
    delete<T extends StyleDeleteArgs>(args: SelectSubset<T, StyleDeleteArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Style.
     * @param {StyleUpdateArgs} args - Arguments to update one Style.
     * @example
     * // Update one Style
     * const style = await prisma.style.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StyleUpdateArgs>(args: SelectSubset<T, StyleUpdateArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Styles.
     * @param {StyleDeleteManyArgs} args - Arguments to filter Styles to delete.
     * @example
     * // Delete a few Styles
     * const { count } = await prisma.style.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StyleDeleteManyArgs>(args?: SelectSubset<T, StyleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Styles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Styles
     * const style = await prisma.style.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StyleUpdateManyArgs>(args: SelectSubset<T, StyleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Style.
     * @param {StyleUpsertArgs} args - Arguments to update or create a Style.
     * @example
     * // Update or create a Style
     * const style = await prisma.style.upsert({
     *   create: {
     *     // ... data to create a Style
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Style we want to update
     *   }
     * })
     */
    upsert<T extends StyleUpsertArgs>(args: SelectSubset<T, StyleUpsertArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Styles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleCountArgs} args - Arguments to filter Styles to count.
     * @example
     * // Count the number of Styles
     * const count = await prisma.style.count({
     *   where: {
     *     // ... the filter for the Styles we want to count
     *   }
     * })
    **/
    count<T extends StyleCountArgs>(
      args?: Subset<T, StyleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StyleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Style.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StyleAggregateArgs>(args: Subset<T, StyleAggregateArgs>): Prisma.PrismaPromise<GetStyleAggregateType<T>>

    /**
     * Group by Style.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StyleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StyleGroupByArgs['orderBy'] }
        : { orderBy?: StyleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StyleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStyleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Style model
   */
  readonly fields: StyleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Style.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StyleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userStyles<T extends Style$userStylesArgs<ExtArgs> = {}>(args?: Subset<T, Style$userStylesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStylePayload<ExtArgs>, T, "findMany"> | Null>
    activations<T extends Style$activationsArgs<ExtArgs> = {}>(args?: Subset<T, Style$activationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Style model
   */ 
  interface StyleFieldRefs {
    readonly id: FieldRef<"Style", 'String'>
    readonly name: FieldRef<"Style", 'String'>
    readonly description: FieldRef<"Style", 'String'>
    readonly rarity: FieldRef<"Style", 'Rarity'>
    readonly category: FieldRef<"Style", 'String'>
    readonly imageUrl: FieldRef<"Style", 'String'>
    readonly totalPoints: FieldRef<"Style", 'Int'>
    readonly activationCount: FieldRef<"Style", 'Int'>
    readonly createdAt: FieldRef<"Style", 'DateTime'>
    readonly updatedAt: FieldRef<"Style", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Style findUnique
   */
  export type StyleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Style to fetch.
     */
    where: StyleWhereUniqueInput
  }

  /**
   * Style findUniqueOrThrow
   */
  export type StyleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Style to fetch.
     */
    where: StyleWhereUniqueInput
  }

  /**
   * Style findFirst
   */
  export type StyleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Style to fetch.
     */
    where?: StyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Styles to fetch.
     */
    orderBy?: StyleOrderByWithRelationInput | StyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Styles.
     */
    cursor?: StyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Styles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Styles.
     */
    distinct?: StyleScalarFieldEnum | StyleScalarFieldEnum[]
  }

  /**
   * Style findFirstOrThrow
   */
  export type StyleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Style to fetch.
     */
    where?: StyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Styles to fetch.
     */
    orderBy?: StyleOrderByWithRelationInput | StyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Styles.
     */
    cursor?: StyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Styles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Styles.
     */
    distinct?: StyleScalarFieldEnum | StyleScalarFieldEnum[]
  }

  /**
   * Style findMany
   */
  export type StyleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Styles to fetch.
     */
    where?: StyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Styles to fetch.
     */
    orderBy?: StyleOrderByWithRelationInput | StyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Styles.
     */
    cursor?: StyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Styles.
     */
    skip?: number
    distinct?: StyleScalarFieldEnum | StyleScalarFieldEnum[]
  }

  /**
   * Style create
   */
  export type StyleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * The data needed to create a Style.
     */
    data: XOR<StyleCreateInput, StyleUncheckedCreateInput>
  }

  /**
   * Style createMany
   */
  export type StyleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Styles.
     */
    data: StyleCreateManyInput | StyleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Style createManyAndReturn
   */
  export type StyleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Styles.
     */
    data: StyleCreateManyInput | StyleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Style update
   */
  export type StyleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * The data needed to update a Style.
     */
    data: XOR<StyleUpdateInput, StyleUncheckedUpdateInput>
    /**
     * Choose, which Style to update.
     */
    where: StyleWhereUniqueInput
  }

  /**
   * Style updateMany
   */
  export type StyleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Styles.
     */
    data: XOR<StyleUpdateManyMutationInput, StyleUncheckedUpdateManyInput>
    /**
     * Filter which Styles to update
     */
    where?: StyleWhereInput
  }

  /**
   * Style upsert
   */
  export type StyleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * The filter to search for the Style to update in case it exists.
     */
    where: StyleWhereUniqueInput
    /**
     * In case the Style found by the `where` argument doesn't exist, create a new Style with this data.
     */
    create: XOR<StyleCreateInput, StyleUncheckedCreateInput>
    /**
     * In case the Style was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StyleUpdateInput, StyleUncheckedUpdateInput>
  }

  /**
   * Style delete
   */
  export type StyleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter which Style to delete.
     */
    where: StyleWhereUniqueInput
  }

  /**
   * Style deleteMany
   */
  export type StyleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Styles to delete
     */
    where?: StyleWhereInput
  }

  /**
   * Style.userStyles
   */
  export type Style$userStylesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStyle
     */
    select?: UserStyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStyleInclude<ExtArgs> | null
    where?: UserStyleWhereInput
    orderBy?: UserStyleOrderByWithRelationInput | UserStyleOrderByWithRelationInput[]
    cursor?: UserStyleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStyleScalarFieldEnum | UserStyleScalarFieldEnum[]
  }

  /**
   * Style.activations
   */
  export type Style$activationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activation
     */
    select?: ActivationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivationInclude<ExtArgs> | null
    where?: ActivationWhereInput
    orderBy?: ActivationOrderByWithRelationInput | ActivationOrderByWithRelationInput[]
    cursor?: ActivationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivationScalarFieldEnum | ActivationScalarFieldEnum[]
  }

  /**
   * Style without action
   */
  export type StyleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
  }


  /**
   * Model UserStyle
   */

  export type AggregateUserStyle = {
    _count: UserStyleCountAggregateOutputType | null
    _avg: UserStyleAvgAggregateOutputType | null
    _sum: UserStyleSumAggregateOutputType | null
    _min: UserStyleMinAggregateOutputType | null
    _max: UserStyleMaxAggregateOutputType | null
  }

  export type UserStyleAvgAggregateOutputType = {
    serialNumber: number | null
    points: number | null
  }

  export type UserStyleSumAggregateOutputType = {
    serialNumber: number | null
    points: number | null
  }

  export type UserStyleMinAggregateOutputType = {
    id: string | null
    userId: string | null
    styleId: string | null
    serialNumber: number | null
    points: number | null
    mintedAt: Date | null
  }

  export type UserStyleMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    styleId: string | null
    serialNumber: number | null
    points: number | null
    mintedAt: Date | null
  }

  export type UserStyleCountAggregateOutputType = {
    id: number
    userId: number
    styleId: number
    serialNumber: number
    points: number
    mintedAt: number
    _all: number
  }


  export type UserStyleAvgAggregateInputType = {
    serialNumber?: true
    points?: true
  }

  export type UserStyleSumAggregateInputType = {
    serialNumber?: true
    points?: true
  }

  export type UserStyleMinAggregateInputType = {
    id?: true
    userId?: true
    styleId?: true
    serialNumber?: true
    points?: true
    mintedAt?: true
  }

  export type UserStyleMaxAggregateInputType = {
    id?: true
    userId?: true
    styleId?: true
    serialNumber?: true
    points?: true
    mintedAt?: true
  }

  export type UserStyleCountAggregateInputType = {
    id?: true
    userId?: true
    styleId?: true
    serialNumber?: true
    points?: true
    mintedAt?: true
    _all?: true
  }

  export type UserStyleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStyle to aggregate.
     */
    where?: UserStyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStyles to fetch.
     */
    orderBy?: UserStyleOrderByWithRelationInput | UserStyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserStyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStyles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStyles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserStyles
    **/
    _count?: true | UserStyleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserStyleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserStyleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserStyleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserStyleMaxAggregateInputType
  }

  export type GetUserStyleAggregateType<T extends UserStyleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserStyle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserStyle[P]>
      : GetScalarType<T[P], AggregateUserStyle[P]>
  }




  export type UserStyleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStyleWhereInput
    orderBy?: UserStyleOrderByWithAggregationInput | UserStyleOrderByWithAggregationInput[]
    by: UserStyleScalarFieldEnum[] | UserStyleScalarFieldEnum
    having?: UserStyleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserStyleCountAggregateInputType | true
    _avg?: UserStyleAvgAggregateInputType
    _sum?: UserStyleSumAggregateInputType
    _min?: UserStyleMinAggregateInputType
    _max?: UserStyleMaxAggregateInputType
  }

  export type UserStyleGroupByOutputType = {
    id: string
    userId: string
    styleId: string
    serialNumber: number | null
    points: number
    mintedAt: Date
    _count: UserStyleCountAggregateOutputType | null
    _avg: UserStyleAvgAggregateOutputType | null
    _sum: UserStyleSumAggregateOutputType | null
    _min: UserStyleMinAggregateOutputType | null
    _max: UserStyleMaxAggregateOutputType | null
  }

  type GetUserStyleGroupByPayload<T extends UserStyleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserStyleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserStyleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserStyleGroupByOutputType[P]>
            : GetScalarType<T[P], UserStyleGroupByOutputType[P]>
        }
      >
    >


  export type UserStyleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    styleId?: boolean
    serialNumber?: boolean
    points?: boolean
    mintedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStyle"]>

  export type UserStyleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    styleId?: boolean
    serialNumber?: boolean
    points?: boolean
    mintedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStyle"]>

  export type UserStyleSelectScalar = {
    id?: boolean
    userId?: boolean
    styleId?: boolean
    serialNumber?: boolean
    points?: boolean
    mintedAt?: boolean
  }

  export type UserStyleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }
  export type UserStyleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }

  export type $UserStylePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserStyle"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      style: Prisma.$StylePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      styleId: string
      serialNumber: number | null
      points: number
      mintedAt: Date
    }, ExtArgs["result"]["userStyle"]>
    composites: {}
  }

  type UserStyleGetPayload<S extends boolean | null | undefined | UserStyleDefaultArgs> = $Result.GetResult<Prisma.$UserStylePayload, S>

  type UserStyleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserStyleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserStyleCountAggregateInputType | true
    }

  export interface UserStyleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserStyle'], meta: { name: 'UserStyle' } }
    /**
     * Find zero or one UserStyle that matches the filter.
     * @param {UserStyleFindUniqueArgs} args - Arguments to find a UserStyle
     * @example
     * // Get one UserStyle
     * const userStyle = await prisma.userStyle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserStyleFindUniqueArgs>(args: SelectSubset<T, UserStyleFindUniqueArgs<ExtArgs>>): Prisma__UserStyleClient<$Result.GetResult<Prisma.$UserStylePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserStyle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserStyleFindUniqueOrThrowArgs} args - Arguments to find a UserStyle
     * @example
     * // Get one UserStyle
     * const userStyle = await prisma.userStyle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserStyleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserStyleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserStyleClient<$Result.GetResult<Prisma.$UserStylePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserStyle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStyleFindFirstArgs} args - Arguments to find a UserStyle
     * @example
     * // Get one UserStyle
     * const userStyle = await prisma.userStyle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserStyleFindFirstArgs>(args?: SelectSubset<T, UserStyleFindFirstArgs<ExtArgs>>): Prisma__UserStyleClient<$Result.GetResult<Prisma.$UserStylePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserStyle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStyleFindFirstOrThrowArgs} args - Arguments to find a UserStyle
     * @example
     * // Get one UserStyle
     * const userStyle = await prisma.userStyle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserStyleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserStyleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserStyleClient<$Result.GetResult<Prisma.$UserStylePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserStyles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStyleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserStyles
     * const userStyles = await prisma.userStyle.findMany()
     * 
     * // Get first 10 UserStyles
     * const userStyles = await prisma.userStyle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userStyleWithIdOnly = await prisma.userStyle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserStyleFindManyArgs>(args?: SelectSubset<T, UserStyleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStylePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserStyle.
     * @param {UserStyleCreateArgs} args - Arguments to create a UserStyle.
     * @example
     * // Create one UserStyle
     * const UserStyle = await prisma.userStyle.create({
     *   data: {
     *     // ... data to create a UserStyle
     *   }
     * })
     * 
     */
    create<T extends UserStyleCreateArgs>(args: SelectSubset<T, UserStyleCreateArgs<ExtArgs>>): Prisma__UserStyleClient<$Result.GetResult<Prisma.$UserStylePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserStyles.
     * @param {UserStyleCreateManyArgs} args - Arguments to create many UserStyles.
     * @example
     * // Create many UserStyles
     * const userStyle = await prisma.userStyle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserStyleCreateManyArgs>(args?: SelectSubset<T, UserStyleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserStyles and returns the data saved in the database.
     * @param {UserStyleCreateManyAndReturnArgs} args - Arguments to create many UserStyles.
     * @example
     * // Create many UserStyles
     * const userStyle = await prisma.userStyle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserStyles and only return the `id`
     * const userStyleWithIdOnly = await prisma.userStyle.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserStyleCreateManyAndReturnArgs>(args?: SelectSubset<T, UserStyleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStylePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserStyle.
     * @param {UserStyleDeleteArgs} args - Arguments to delete one UserStyle.
     * @example
     * // Delete one UserStyle
     * const UserStyle = await prisma.userStyle.delete({
     *   where: {
     *     // ... filter to delete one UserStyle
     *   }
     * })
     * 
     */
    delete<T extends UserStyleDeleteArgs>(args: SelectSubset<T, UserStyleDeleteArgs<ExtArgs>>): Prisma__UserStyleClient<$Result.GetResult<Prisma.$UserStylePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserStyle.
     * @param {UserStyleUpdateArgs} args - Arguments to update one UserStyle.
     * @example
     * // Update one UserStyle
     * const userStyle = await prisma.userStyle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserStyleUpdateArgs>(args: SelectSubset<T, UserStyleUpdateArgs<ExtArgs>>): Prisma__UserStyleClient<$Result.GetResult<Prisma.$UserStylePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserStyles.
     * @param {UserStyleDeleteManyArgs} args - Arguments to filter UserStyles to delete.
     * @example
     * // Delete a few UserStyles
     * const { count } = await prisma.userStyle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserStyleDeleteManyArgs>(args?: SelectSubset<T, UserStyleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStyles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStyleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserStyles
     * const userStyle = await prisma.userStyle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserStyleUpdateManyArgs>(args: SelectSubset<T, UserStyleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserStyle.
     * @param {UserStyleUpsertArgs} args - Arguments to update or create a UserStyle.
     * @example
     * // Update or create a UserStyle
     * const userStyle = await prisma.userStyle.upsert({
     *   create: {
     *     // ... data to create a UserStyle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserStyle we want to update
     *   }
     * })
     */
    upsert<T extends UserStyleUpsertArgs>(args: SelectSubset<T, UserStyleUpsertArgs<ExtArgs>>): Prisma__UserStyleClient<$Result.GetResult<Prisma.$UserStylePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserStyles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStyleCountArgs} args - Arguments to filter UserStyles to count.
     * @example
     * // Count the number of UserStyles
     * const count = await prisma.userStyle.count({
     *   where: {
     *     // ... the filter for the UserStyles we want to count
     *   }
     * })
    **/
    count<T extends UserStyleCountArgs>(
      args?: Subset<T, UserStyleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserStyleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserStyle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStyleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserStyleAggregateArgs>(args: Subset<T, UserStyleAggregateArgs>): Prisma.PrismaPromise<GetUserStyleAggregateType<T>>

    /**
     * Group by UserStyle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStyleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserStyleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserStyleGroupByArgs['orderBy'] }
        : { orderBy?: UserStyleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserStyleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserStyleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserStyle model
   */
  readonly fields: UserStyleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserStyle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserStyleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    style<T extends StyleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StyleDefaultArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserStyle model
   */ 
  interface UserStyleFieldRefs {
    readonly id: FieldRef<"UserStyle", 'String'>
    readonly userId: FieldRef<"UserStyle", 'String'>
    readonly styleId: FieldRef<"UserStyle", 'String'>
    readonly serialNumber: FieldRef<"UserStyle", 'Int'>
    readonly points: FieldRef<"UserStyle", 'Int'>
    readonly mintedAt: FieldRef<"UserStyle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserStyle findUnique
   */
  export type UserStyleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStyle
     */
    select?: UserStyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStyleInclude<ExtArgs> | null
    /**
     * Filter, which UserStyle to fetch.
     */
    where: UserStyleWhereUniqueInput
  }

  /**
   * UserStyle findUniqueOrThrow
   */
  export type UserStyleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStyle
     */
    select?: UserStyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStyleInclude<ExtArgs> | null
    /**
     * Filter, which UserStyle to fetch.
     */
    where: UserStyleWhereUniqueInput
  }

  /**
   * UserStyle findFirst
   */
  export type UserStyleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStyle
     */
    select?: UserStyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStyleInclude<ExtArgs> | null
    /**
     * Filter, which UserStyle to fetch.
     */
    where?: UserStyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStyles to fetch.
     */
    orderBy?: UserStyleOrderByWithRelationInput | UserStyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStyles.
     */
    cursor?: UserStyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStyles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStyles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStyles.
     */
    distinct?: UserStyleScalarFieldEnum | UserStyleScalarFieldEnum[]
  }

  /**
   * UserStyle findFirstOrThrow
   */
  export type UserStyleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStyle
     */
    select?: UserStyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStyleInclude<ExtArgs> | null
    /**
     * Filter, which UserStyle to fetch.
     */
    where?: UserStyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStyles to fetch.
     */
    orderBy?: UserStyleOrderByWithRelationInput | UserStyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStyles.
     */
    cursor?: UserStyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStyles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStyles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStyles.
     */
    distinct?: UserStyleScalarFieldEnum | UserStyleScalarFieldEnum[]
  }

  /**
   * UserStyle findMany
   */
  export type UserStyleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStyle
     */
    select?: UserStyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStyleInclude<ExtArgs> | null
    /**
     * Filter, which UserStyles to fetch.
     */
    where?: UserStyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStyles to fetch.
     */
    orderBy?: UserStyleOrderByWithRelationInput | UserStyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserStyles.
     */
    cursor?: UserStyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStyles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStyles.
     */
    skip?: number
    distinct?: UserStyleScalarFieldEnum | UserStyleScalarFieldEnum[]
  }

  /**
   * UserStyle create
   */
  export type UserStyleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStyle
     */
    select?: UserStyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStyleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserStyle.
     */
    data: XOR<UserStyleCreateInput, UserStyleUncheckedCreateInput>
  }

  /**
   * UserStyle createMany
   */
  export type UserStyleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserStyles.
     */
    data: UserStyleCreateManyInput | UserStyleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserStyle createManyAndReturn
   */
  export type UserStyleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStyle
     */
    select?: UserStyleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserStyles.
     */
    data: UserStyleCreateManyInput | UserStyleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStyleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStyle update
   */
  export type UserStyleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStyle
     */
    select?: UserStyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStyleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserStyle.
     */
    data: XOR<UserStyleUpdateInput, UserStyleUncheckedUpdateInput>
    /**
     * Choose, which UserStyle to update.
     */
    where: UserStyleWhereUniqueInput
  }

  /**
   * UserStyle updateMany
   */
  export type UserStyleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserStyles.
     */
    data: XOR<UserStyleUpdateManyMutationInput, UserStyleUncheckedUpdateManyInput>
    /**
     * Filter which UserStyles to update
     */
    where?: UserStyleWhereInput
  }

  /**
   * UserStyle upsert
   */
  export type UserStyleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStyle
     */
    select?: UserStyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStyleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserStyle to update in case it exists.
     */
    where: UserStyleWhereUniqueInput
    /**
     * In case the UserStyle found by the `where` argument doesn't exist, create a new UserStyle with this data.
     */
    create: XOR<UserStyleCreateInput, UserStyleUncheckedCreateInput>
    /**
     * In case the UserStyle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserStyleUpdateInput, UserStyleUncheckedUpdateInput>
  }

  /**
   * UserStyle delete
   */
  export type UserStyleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStyle
     */
    select?: UserStyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStyleInclude<ExtArgs> | null
    /**
     * Filter which UserStyle to delete.
     */
    where: UserStyleWhereUniqueInput
  }

  /**
   * UserStyle deleteMany
   */
  export type UserStyleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStyles to delete
     */
    where?: UserStyleWhereInput
  }

  /**
   * UserStyle without action
   */
  export type UserStyleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStyle
     */
    select?: UserStyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStyleInclude<ExtArgs> | null
  }


  /**
   * Model Activation
   */

  export type AggregateActivation = {
    _count: ActivationCountAggregateOutputType | null
    _avg: ActivationAvgAggregateOutputType | null
    _sum: ActivationSumAggregateOutputType | null
    _min: ActivationMinAggregateOutputType | null
    _max: ActivationMaxAggregateOutputType | null
  }

  export type ActivationAvgAggregateOutputType = {
    points: number | null
    confidence: number | null
  }

  export type ActivationSumAggregateOutputType = {
    points: number | null
    confidence: number | null
  }

  export type ActivationMinAggregateOutputType = {
    id: string | null
    styleId: string | null
    playerId: string | null
    playerName: string | null
    matchId: string | null
    leagueId: string | null
    points: number | null
    confidence: number | null
    timestamp: Date | null
  }

  export type ActivationMaxAggregateOutputType = {
    id: string | null
    styleId: string | null
    playerId: string | null
    playerName: string | null
    matchId: string | null
    leagueId: string | null
    points: number | null
    confidence: number | null
    timestamp: Date | null
  }

  export type ActivationCountAggregateOutputType = {
    id: number
    styleId: number
    playerId: number
    playerName: number
    matchId: number
    leagueId: number
    points: number
    confidence: number
    timestamp: number
    _all: number
  }


  export type ActivationAvgAggregateInputType = {
    points?: true
    confidence?: true
  }

  export type ActivationSumAggregateInputType = {
    points?: true
    confidence?: true
  }

  export type ActivationMinAggregateInputType = {
    id?: true
    styleId?: true
    playerId?: true
    playerName?: true
    matchId?: true
    leagueId?: true
    points?: true
    confidence?: true
    timestamp?: true
  }

  export type ActivationMaxAggregateInputType = {
    id?: true
    styleId?: true
    playerId?: true
    playerName?: true
    matchId?: true
    leagueId?: true
    points?: true
    confidence?: true
    timestamp?: true
  }

  export type ActivationCountAggregateInputType = {
    id?: true
    styleId?: true
    playerId?: true
    playerName?: true
    matchId?: true
    leagueId?: true
    points?: true
    confidence?: true
    timestamp?: true
    _all?: true
  }

  export type ActivationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activation to aggregate.
     */
    where?: ActivationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activations to fetch.
     */
    orderBy?: ActivationOrderByWithRelationInput | ActivationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activations
    **/
    _count?: true | ActivationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivationMaxAggregateInputType
  }

  export type GetActivationAggregateType<T extends ActivationAggregateArgs> = {
        [P in keyof T & keyof AggregateActivation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivation[P]>
      : GetScalarType<T[P], AggregateActivation[P]>
  }




  export type ActivationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivationWhereInput
    orderBy?: ActivationOrderByWithAggregationInput | ActivationOrderByWithAggregationInput[]
    by: ActivationScalarFieldEnum[] | ActivationScalarFieldEnum
    having?: ActivationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivationCountAggregateInputType | true
    _avg?: ActivationAvgAggregateInputType
    _sum?: ActivationSumAggregateInputType
    _min?: ActivationMinAggregateInputType
    _max?: ActivationMaxAggregateInputType
  }

  export type ActivationGroupByOutputType = {
    id: string
    styleId: string
    playerId: string
    playerName: string
    matchId: string
    leagueId: string
    points: number
    confidence: number
    timestamp: Date
    _count: ActivationCountAggregateOutputType | null
    _avg: ActivationAvgAggregateOutputType | null
    _sum: ActivationSumAggregateOutputType | null
    _min: ActivationMinAggregateOutputType | null
    _max: ActivationMaxAggregateOutputType | null
  }

  type GetActivationGroupByPayload<T extends ActivationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivationGroupByOutputType[P]>
            : GetScalarType<T[P], ActivationGroupByOutputType[P]>
        }
      >
    >


  export type ActivationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    styleId?: boolean
    playerId?: boolean
    playerName?: boolean
    matchId?: boolean
    leagueId?: boolean
    points?: boolean
    confidence?: boolean
    timestamp?: boolean
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activation"]>

  export type ActivationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    styleId?: boolean
    playerId?: boolean
    playerName?: boolean
    matchId?: boolean
    leagueId?: boolean
    points?: boolean
    confidence?: boolean
    timestamp?: boolean
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activation"]>

  export type ActivationSelectScalar = {
    id?: boolean
    styleId?: boolean
    playerId?: boolean
    playerName?: boolean
    matchId?: boolean
    leagueId?: boolean
    points?: boolean
    confidence?: boolean
    timestamp?: boolean
  }

  export type ActivationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }
  export type ActivationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    style?: boolean | StyleDefaultArgs<ExtArgs>
  }

  export type $ActivationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Activation"
    objects: {
      style: Prisma.$StylePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      styleId: string
      playerId: string
      playerName: string
      matchId: string
      leagueId: string
      points: number
      confidence: number
      timestamp: Date
    }, ExtArgs["result"]["activation"]>
    composites: {}
  }

  type ActivationGetPayload<S extends boolean | null | undefined | ActivationDefaultArgs> = $Result.GetResult<Prisma.$ActivationPayload, S>

  type ActivationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActivationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActivationCountAggregateInputType | true
    }

  export interface ActivationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activation'], meta: { name: 'Activation' } }
    /**
     * Find zero or one Activation that matches the filter.
     * @param {ActivationFindUniqueArgs} args - Arguments to find a Activation
     * @example
     * // Get one Activation
     * const activation = await prisma.activation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivationFindUniqueArgs>(args: SelectSubset<T, ActivationFindUniqueArgs<ExtArgs>>): Prisma__ActivationClient<$Result.GetResult<Prisma.$ActivationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Activation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ActivationFindUniqueOrThrowArgs} args - Arguments to find a Activation
     * @example
     * // Get one Activation
     * const activation = await prisma.activation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivationFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivationClient<$Result.GetResult<Prisma.$ActivationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Activation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivationFindFirstArgs} args - Arguments to find a Activation
     * @example
     * // Get one Activation
     * const activation = await prisma.activation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivationFindFirstArgs>(args?: SelectSubset<T, ActivationFindFirstArgs<ExtArgs>>): Prisma__ActivationClient<$Result.GetResult<Prisma.$ActivationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Activation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivationFindFirstOrThrowArgs} args - Arguments to find a Activation
     * @example
     * // Get one Activation
     * const activation = await prisma.activation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivationFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivationClient<$Result.GetResult<Prisma.$ActivationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Activations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activations
     * const activations = await prisma.activation.findMany()
     * 
     * // Get first 10 Activations
     * const activations = await prisma.activation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activationWithIdOnly = await prisma.activation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivationFindManyArgs>(args?: SelectSubset<T, ActivationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Activation.
     * @param {ActivationCreateArgs} args - Arguments to create a Activation.
     * @example
     * // Create one Activation
     * const Activation = await prisma.activation.create({
     *   data: {
     *     // ... data to create a Activation
     *   }
     * })
     * 
     */
    create<T extends ActivationCreateArgs>(args: SelectSubset<T, ActivationCreateArgs<ExtArgs>>): Prisma__ActivationClient<$Result.GetResult<Prisma.$ActivationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Activations.
     * @param {ActivationCreateManyArgs} args - Arguments to create many Activations.
     * @example
     * // Create many Activations
     * const activation = await prisma.activation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivationCreateManyArgs>(args?: SelectSubset<T, ActivationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Activations and returns the data saved in the database.
     * @param {ActivationCreateManyAndReturnArgs} args - Arguments to create many Activations.
     * @example
     * // Create many Activations
     * const activation = await prisma.activation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Activations and only return the `id`
     * const activationWithIdOnly = await prisma.activation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivationCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Activation.
     * @param {ActivationDeleteArgs} args - Arguments to delete one Activation.
     * @example
     * // Delete one Activation
     * const Activation = await prisma.activation.delete({
     *   where: {
     *     // ... filter to delete one Activation
     *   }
     * })
     * 
     */
    delete<T extends ActivationDeleteArgs>(args: SelectSubset<T, ActivationDeleteArgs<ExtArgs>>): Prisma__ActivationClient<$Result.GetResult<Prisma.$ActivationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Activation.
     * @param {ActivationUpdateArgs} args - Arguments to update one Activation.
     * @example
     * // Update one Activation
     * const activation = await prisma.activation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivationUpdateArgs>(args: SelectSubset<T, ActivationUpdateArgs<ExtArgs>>): Prisma__ActivationClient<$Result.GetResult<Prisma.$ActivationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Activations.
     * @param {ActivationDeleteManyArgs} args - Arguments to filter Activations to delete.
     * @example
     * // Delete a few Activations
     * const { count } = await prisma.activation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivationDeleteManyArgs>(args?: SelectSubset<T, ActivationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activations
     * const activation = await prisma.activation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivationUpdateManyArgs>(args: SelectSubset<T, ActivationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Activation.
     * @param {ActivationUpsertArgs} args - Arguments to update or create a Activation.
     * @example
     * // Update or create a Activation
     * const activation = await prisma.activation.upsert({
     *   create: {
     *     // ... data to create a Activation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activation we want to update
     *   }
     * })
     */
    upsert<T extends ActivationUpsertArgs>(args: SelectSubset<T, ActivationUpsertArgs<ExtArgs>>): Prisma__ActivationClient<$Result.GetResult<Prisma.$ActivationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Activations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivationCountArgs} args - Arguments to filter Activations to count.
     * @example
     * // Count the number of Activations
     * const count = await prisma.activation.count({
     *   where: {
     *     // ... the filter for the Activations we want to count
     *   }
     * })
    **/
    count<T extends ActivationCountArgs>(
      args?: Subset<T, ActivationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivationAggregateArgs>(args: Subset<T, ActivationAggregateArgs>): Prisma.PrismaPromise<GetActivationAggregateType<T>>

    /**
     * Group by Activation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivationGroupByArgs['orderBy'] }
        : { orderBy?: ActivationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Activation model
   */
  readonly fields: ActivationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    style<T extends StyleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StyleDefaultArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Activation model
   */ 
  interface ActivationFieldRefs {
    readonly id: FieldRef<"Activation", 'String'>
    readonly styleId: FieldRef<"Activation", 'String'>
    readonly playerId: FieldRef<"Activation", 'String'>
    readonly playerName: FieldRef<"Activation", 'String'>
    readonly matchId: FieldRef<"Activation", 'String'>
    readonly leagueId: FieldRef<"Activation", 'String'>
    readonly points: FieldRef<"Activation", 'Int'>
    readonly confidence: FieldRef<"Activation", 'Float'>
    readonly timestamp: FieldRef<"Activation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Activation findUnique
   */
  export type ActivationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activation
     */
    select?: ActivationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivationInclude<ExtArgs> | null
    /**
     * Filter, which Activation to fetch.
     */
    where: ActivationWhereUniqueInput
  }

  /**
   * Activation findUniqueOrThrow
   */
  export type ActivationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activation
     */
    select?: ActivationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivationInclude<ExtArgs> | null
    /**
     * Filter, which Activation to fetch.
     */
    where: ActivationWhereUniqueInput
  }

  /**
   * Activation findFirst
   */
  export type ActivationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activation
     */
    select?: ActivationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivationInclude<ExtArgs> | null
    /**
     * Filter, which Activation to fetch.
     */
    where?: ActivationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activations to fetch.
     */
    orderBy?: ActivationOrderByWithRelationInput | ActivationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activations.
     */
    cursor?: ActivationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activations.
     */
    distinct?: ActivationScalarFieldEnum | ActivationScalarFieldEnum[]
  }

  /**
   * Activation findFirstOrThrow
   */
  export type ActivationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activation
     */
    select?: ActivationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivationInclude<ExtArgs> | null
    /**
     * Filter, which Activation to fetch.
     */
    where?: ActivationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activations to fetch.
     */
    orderBy?: ActivationOrderByWithRelationInput | ActivationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activations.
     */
    cursor?: ActivationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activations.
     */
    distinct?: ActivationScalarFieldEnum | ActivationScalarFieldEnum[]
  }

  /**
   * Activation findMany
   */
  export type ActivationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activation
     */
    select?: ActivationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivationInclude<ExtArgs> | null
    /**
     * Filter, which Activations to fetch.
     */
    where?: ActivationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activations to fetch.
     */
    orderBy?: ActivationOrderByWithRelationInput | ActivationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activations.
     */
    cursor?: ActivationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activations.
     */
    skip?: number
    distinct?: ActivationScalarFieldEnum | ActivationScalarFieldEnum[]
  }

  /**
   * Activation create
   */
  export type ActivationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activation
     */
    select?: ActivationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivationInclude<ExtArgs> | null
    /**
     * The data needed to create a Activation.
     */
    data: XOR<ActivationCreateInput, ActivationUncheckedCreateInput>
  }

  /**
   * Activation createMany
   */
  export type ActivationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Activations.
     */
    data: ActivationCreateManyInput | ActivationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Activation createManyAndReturn
   */
  export type ActivationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activation
     */
    select?: ActivationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Activations.
     */
    data: ActivationCreateManyInput | ActivationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Activation update
   */
  export type ActivationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activation
     */
    select?: ActivationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivationInclude<ExtArgs> | null
    /**
     * The data needed to update a Activation.
     */
    data: XOR<ActivationUpdateInput, ActivationUncheckedUpdateInput>
    /**
     * Choose, which Activation to update.
     */
    where: ActivationWhereUniqueInput
  }

  /**
   * Activation updateMany
   */
  export type ActivationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Activations.
     */
    data: XOR<ActivationUpdateManyMutationInput, ActivationUncheckedUpdateManyInput>
    /**
     * Filter which Activations to update
     */
    where?: ActivationWhereInput
  }

  /**
   * Activation upsert
   */
  export type ActivationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activation
     */
    select?: ActivationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivationInclude<ExtArgs> | null
    /**
     * The filter to search for the Activation to update in case it exists.
     */
    where: ActivationWhereUniqueInput
    /**
     * In case the Activation found by the `where` argument doesn't exist, create a new Activation with this data.
     */
    create: XOR<ActivationCreateInput, ActivationUncheckedCreateInput>
    /**
     * In case the Activation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivationUpdateInput, ActivationUncheckedUpdateInput>
  }

  /**
   * Activation delete
   */
  export type ActivationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activation
     */
    select?: ActivationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivationInclude<ExtArgs> | null
    /**
     * Filter which Activation to delete.
     */
    where: ActivationWhereUniqueInput
  }

  /**
   * Activation deleteMany
   */
  export type ActivationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activations to delete
     */
    where?: ActivationWhereInput
  }

  /**
   * Activation without action
   */
  export type ActivationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activation
     */
    select?: ActivationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivationInclude<ExtArgs> | null
  }


  /**
   * Model Player
   */

  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerMinAggregateOutputType = {
    id: string | null
    apiId: string | null
    name: string | null
    team: string | null
    league: string | null
    position: string | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: string | null
    apiId: string | null
    name: string | null
    team: string | null
    league: string | null
    position: string | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    apiId: number
    name: number
    team: number
    league: number
    position: number
    _all: number
  }


  export type PlayerMinAggregateInputType = {
    id?: true
    apiId?: true
    name?: true
    team?: true
    league?: true
    position?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    apiId?: true
    name?: true
    team?: true
    league?: true
    position?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    apiId?: true
    name?: true
    team?: true
    league?: true
    position?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithAggregationInput | PlayerOrderByWithAggregationInput[]
    by: PlayerScalarFieldEnum[] | PlayerScalarFieldEnum
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }

  export type PlayerGroupByOutputType = {
    id: string
    apiId: string
    name: string
    team: string
    league: string
    position: string
    _count: PlayerCountAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiId?: boolean
    name?: boolean
    team?: boolean
    league?: boolean
    position?: boolean
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiId?: boolean
    name?: boolean
    team?: boolean
    league?: boolean
    position?: boolean
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectScalar = {
    id?: boolean
    apiId?: boolean
    name?: boolean
    team?: boolean
    league?: boolean
    position?: boolean
  }


  export type $PlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      apiId: string
      name: string
      team: string
      league: string
      position: string
    }, ExtArgs["result"]["player"]>
    composites: {}
  }

  type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = $Result.GetResult<Prisma.$PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerFindUniqueArgs>(args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Player that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerFindFirstArgs>(args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Player that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerFindManyArgs>(args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
     */
    create<T extends PlayerCreateArgs>(args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Players.
     * @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerCreateManyArgs>(args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Players and returns the data saved in the database.
     * @param {PlayerCreateManyAndReturnArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Players and only return the `id`
     * const playerWithIdOnly = await prisma.player.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
     */
    delete<T extends PlayerDeleteArgs>(args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerUpdateArgs>(args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerDeleteManyArgs>(args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerUpdateManyArgs>(args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
     */
    upsert<T extends PlayerUpsertArgs>(args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player model
   */
  readonly fields: PlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Player model
   */ 
  interface PlayerFieldRefs {
    readonly id: FieldRef<"Player", 'String'>
    readonly apiId: FieldRef<"Player", 'String'>
    readonly name: FieldRef<"Player", 'String'>
    readonly team: FieldRef<"Player", 'String'>
    readonly league: FieldRef<"Player", 'String'>
    readonly position: FieldRef<"Player", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }

  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player createManyAndReturn
   */
  export type PlayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
  }

  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }

  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
  }

  /**
   * Player without action
   */
  export type PlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
  }


  /**
   * Model Match
   */

  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchMinAggregateOutputType = {
    id: string | null
    apiId: string | null
    homeTeam: string | null
    awayTeam: string | null
    league: string | null
    status: string | null
    startTime: Date | null
    processed: boolean | null
  }

  export type MatchMaxAggregateOutputType = {
    id: string | null
    apiId: string | null
    homeTeam: string | null
    awayTeam: string | null
    league: string | null
    status: string | null
    startTime: Date | null
    processed: boolean | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    apiId: number
    homeTeam: number
    awayTeam: number
    league: number
    status: number
    startTime: number
    processed: number
    _all: number
  }


  export type MatchMinAggregateInputType = {
    id?: true
    apiId?: true
    homeTeam?: true
    awayTeam?: true
    league?: true
    status?: true
    startTime?: true
    processed?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    apiId?: true
    homeTeam?: true
    awayTeam?: true
    league?: true
    status?: true
    startTime?: true
    processed?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    apiId?: true
    homeTeam?: true
    awayTeam?: true
    league?: true
    status?: true
    startTime?: true
    processed?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithAggregationInput | MatchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }

  export type MatchGroupByOutputType = {
    id: string
    apiId: string
    homeTeam: string
    awayTeam: string
    league: string
    status: string
    startTime: Date
    processed: boolean
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiId?: boolean
    homeTeam?: boolean
    awayTeam?: boolean
    league?: boolean
    status?: boolean
    startTime?: boolean
    processed?: boolean
  }, ExtArgs["result"]["match"]>

  export type MatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiId?: boolean
    homeTeam?: boolean
    awayTeam?: boolean
    league?: boolean
    status?: boolean
    startTime?: boolean
    processed?: boolean
  }, ExtArgs["result"]["match"]>

  export type MatchSelectScalar = {
    id?: boolean
    apiId?: boolean
    homeTeam?: boolean
    awayTeam?: boolean
    league?: boolean
    status?: boolean
    startTime?: boolean
    processed?: boolean
  }


  export type $MatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Match"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      apiId: string
      homeTeam: string
      awayTeam: string
      league: string
      status: string
      startTime: Date
      processed: boolean
    }, ExtArgs["result"]["match"]>
    composites: {}
  }

  type MatchGetPayload<S extends boolean | null | undefined | MatchDefaultArgs> = $Result.GetResult<Prisma.$MatchPayload, S>

  type MatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MatchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Match'], meta: { name: 'Match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchFindUniqueArgs>(args: SelectSubset<T, MatchFindUniqueArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Match that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchFindFirstArgs>(args?: SelectSubset<T, MatchFindFirstArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchFindManyArgs>(args?: SelectSubset<T, MatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
     */
    create<T extends MatchCreateArgs>(args: SelectSubset<T, MatchCreateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Matches.
     * @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchCreateManyArgs>(args?: SelectSubset<T, MatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Matches and returns the data saved in the database.
     * @param {MatchCreateManyAndReturnArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
     */
    delete<T extends MatchDeleteArgs>(args: SelectSubset<T, MatchDeleteArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchUpdateArgs>(args: SelectSubset<T, MatchUpdateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchDeleteManyArgs>(args?: SelectSubset<T, MatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchUpdateManyArgs>(args: SelectSubset<T, MatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
     */
    upsert<T extends MatchUpsertArgs>(args: SelectSubset<T, MatchUpsertArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Match model
   */
  readonly fields: MatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Match model
   */ 
  interface MatchFieldRefs {
    readonly id: FieldRef<"Match", 'String'>
    readonly apiId: FieldRef<"Match", 'String'>
    readonly homeTeam: FieldRef<"Match", 'String'>
    readonly awayTeam: FieldRef<"Match", 'String'>
    readonly league: FieldRef<"Match", 'String'>
    readonly status: FieldRef<"Match", 'String'>
    readonly startTime: FieldRef<"Match", 'DateTime'>
    readonly processed: FieldRef<"Match", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findMany
   */
  export type MatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match create
   */
  export type MatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }

  /**
   * Match createMany
   */
  export type MatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Match createManyAndReturn
   */
  export type MatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Match update
   */
  export type MatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
  }

  /**
   * Match upsert
   */
  export type MatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }

  /**
   * Match delete
   */
  export type MatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
  }

  /**
   * Match without action
   */
  export type MatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
  }


  /**
   * Model Preorder
   */

  export type AggregatePreorder = {
    _count: PreorderCountAggregateOutputType | null
    _avg: PreorderAvgAggregateOutputType | null
    _sum: PreorderSumAggregateOutputType | null
    _min: PreorderMinAggregateOutputType | null
    _max: PreorderMaxAggregateOutputType | null
  }

  export type PreorderAvgAggregateOutputType = {
    quantity: number | null
  }

  export type PreorderSumAggregateOutputType = {
    quantity: number | null
  }

  export type PreorderMinAggregateOutputType = {
    id: string | null
    userId: string | null
    packType: $Enums.PackType | null
    quantity: number | null
    status: $Enums.OrderStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PreorderMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    packType: $Enums.PackType | null
    quantity: number | null
    status: $Enums.OrderStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PreorderCountAggregateOutputType = {
    id: number
    userId: number
    packType: number
    quantity: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PreorderAvgAggregateInputType = {
    quantity?: true
  }

  export type PreorderSumAggregateInputType = {
    quantity?: true
  }

  export type PreorderMinAggregateInputType = {
    id?: true
    userId?: true
    packType?: true
    quantity?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PreorderMaxAggregateInputType = {
    id?: true
    userId?: true
    packType?: true
    quantity?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PreorderCountAggregateInputType = {
    id?: true
    userId?: true
    packType?: true
    quantity?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PreorderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Preorder to aggregate.
     */
    where?: PreorderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preorders to fetch.
     */
    orderBy?: PreorderOrderByWithRelationInput | PreorderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreorderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preorders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preorders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Preorders
    **/
    _count?: true | PreorderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PreorderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PreorderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreorderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreorderMaxAggregateInputType
  }

  export type GetPreorderAggregateType<T extends PreorderAggregateArgs> = {
        [P in keyof T & keyof AggregatePreorder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreorder[P]>
      : GetScalarType<T[P], AggregatePreorder[P]>
  }




  export type PreorderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreorderWhereInput
    orderBy?: PreorderOrderByWithAggregationInput | PreorderOrderByWithAggregationInput[]
    by: PreorderScalarFieldEnum[] | PreorderScalarFieldEnum
    having?: PreorderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreorderCountAggregateInputType | true
    _avg?: PreorderAvgAggregateInputType
    _sum?: PreorderSumAggregateInputType
    _min?: PreorderMinAggregateInputType
    _max?: PreorderMaxAggregateInputType
  }

  export type PreorderGroupByOutputType = {
    id: string
    userId: string
    packType: $Enums.PackType
    quantity: number
    status: $Enums.OrderStatus
    createdAt: Date
    updatedAt: Date
    _count: PreorderCountAggregateOutputType | null
    _avg: PreorderAvgAggregateOutputType | null
    _sum: PreorderSumAggregateOutputType | null
    _min: PreorderMinAggregateOutputType | null
    _max: PreorderMaxAggregateOutputType | null
  }

  type GetPreorderGroupByPayload<T extends PreorderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreorderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreorderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreorderGroupByOutputType[P]>
            : GetScalarType<T[P], PreorderGroupByOutputType[P]>
        }
      >
    >


  export type PreorderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    packType?: boolean
    quantity?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preorder"]>

  export type PreorderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    packType?: boolean
    quantity?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preorder"]>

  export type PreorderSelectScalar = {
    id?: boolean
    userId?: boolean
    packType?: boolean
    quantity?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PreorderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PreorderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PreorderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Preorder"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      packType: $Enums.PackType
      quantity: number
      status: $Enums.OrderStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["preorder"]>
    composites: {}
  }

  type PreorderGetPayload<S extends boolean | null | undefined | PreorderDefaultArgs> = $Result.GetResult<Prisma.$PreorderPayload, S>

  type PreorderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PreorderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PreorderCountAggregateInputType | true
    }

  export interface PreorderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Preorder'], meta: { name: 'Preorder' } }
    /**
     * Find zero or one Preorder that matches the filter.
     * @param {PreorderFindUniqueArgs} args - Arguments to find a Preorder
     * @example
     * // Get one Preorder
     * const preorder = await prisma.preorder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreorderFindUniqueArgs>(args: SelectSubset<T, PreorderFindUniqueArgs<ExtArgs>>): Prisma__PreorderClient<$Result.GetResult<Prisma.$PreorderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Preorder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PreorderFindUniqueOrThrowArgs} args - Arguments to find a Preorder
     * @example
     * // Get one Preorder
     * const preorder = await prisma.preorder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreorderFindUniqueOrThrowArgs>(args: SelectSubset<T, PreorderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreorderClient<$Result.GetResult<Prisma.$PreorderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Preorder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderFindFirstArgs} args - Arguments to find a Preorder
     * @example
     * // Get one Preorder
     * const preorder = await prisma.preorder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreorderFindFirstArgs>(args?: SelectSubset<T, PreorderFindFirstArgs<ExtArgs>>): Prisma__PreorderClient<$Result.GetResult<Prisma.$PreorderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Preorder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderFindFirstOrThrowArgs} args - Arguments to find a Preorder
     * @example
     * // Get one Preorder
     * const preorder = await prisma.preorder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreorderFindFirstOrThrowArgs>(args?: SelectSubset<T, PreorderFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreorderClient<$Result.GetResult<Prisma.$PreorderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Preorders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Preorders
     * const preorders = await prisma.preorder.findMany()
     * 
     * // Get first 10 Preorders
     * const preorders = await prisma.preorder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const preorderWithIdOnly = await prisma.preorder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PreorderFindManyArgs>(args?: SelectSubset<T, PreorderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreorderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Preorder.
     * @param {PreorderCreateArgs} args - Arguments to create a Preorder.
     * @example
     * // Create one Preorder
     * const Preorder = await prisma.preorder.create({
     *   data: {
     *     // ... data to create a Preorder
     *   }
     * })
     * 
     */
    create<T extends PreorderCreateArgs>(args: SelectSubset<T, PreorderCreateArgs<ExtArgs>>): Prisma__PreorderClient<$Result.GetResult<Prisma.$PreorderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Preorders.
     * @param {PreorderCreateManyArgs} args - Arguments to create many Preorders.
     * @example
     * // Create many Preorders
     * const preorder = await prisma.preorder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreorderCreateManyArgs>(args?: SelectSubset<T, PreorderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Preorders and returns the data saved in the database.
     * @param {PreorderCreateManyAndReturnArgs} args - Arguments to create many Preorders.
     * @example
     * // Create many Preorders
     * const preorder = await prisma.preorder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Preorders and only return the `id`
     * const preorderWithIdOnly = await prisma.preorder.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreorderCreateManyAndReturnArgs>(args?: SelectSubset<T, PreorderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreorderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Preorder.
     * @param {PreorderDeleteArgs} args - Arguments to delete one Preorder.
     * @example
     * // Delete one Preorder
     * const Preorder = await prisma.preorder.delete({
     *   where: {
     *     // ... filter to delete one Preorder
     *   }
     * })
     * 
     */
    delete<T extends PreorderDeleteArgs>(args: SelectSubset<T, PreorderDeleteArgs<ExtArgs>>): Prisma__PreorderClient<$Result.GetResult<Prisma.$PreorderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Preorder.
     * @param {PreorderUpdateArgs} args - Arguments to update one Preorder.
     * @example
     * // Update one Preorder
     * const preorder = await prisma.preorder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreorderUpdateArgs>(args: SelectSubset<T, PreorderUpdateArgs<ExtArgs>>): Prisma__PreorderClient<$Result.GetResult<Prisma.$PreorderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Preorders.
     * @param {PreorderDeleteManyArgs} args - Arguments to filter Preorders to delete.
     * @example
     * // Delete a few Preorders
     * const { count } = await prisma.preorder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreorderDeleteManyArgs>(args?: SelectSubset<T, PreorderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Preorders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Preorders
     * const preorder = await prisma.preorder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreorderUpdateManyArgs>(args: SelectSubset<T, PreorderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Preorder.
     * @param {PreorderUpsertArgs} args - Arguments to update or create a Preorder.
     * @example
     * // Update or create a Preorder
     * const preorder = await prisma.preorder.upsert({
     *   create: {
     *     // ... data to create a Preorder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Preorder we want to update
     *   }
     * })
     */
    upsert<T extends PreorderUpsertArgs>(args: SelectSubset<T, PreorderUpsertArgs<ExtArgs>>): Prisma__PreorderClient<$Result.GetResult<Prisma.$PreorderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Preorders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderCountArgs} args - Arguments to filter Preorders to count.
     * @example
     * // Count the number of Preorders
     * const count = await prisma.preorder.count({
     *   where: {
     *     // ... the filter for the Preorders we want to count
     *   }
     * })
    **/
    count<T extends PreorderCountArgs>(
      args?: Subset<T, PreorderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreorderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Preorder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreorderAggregateArgs>(args: Subset<T, PreorderAggregateArgs>): Prisma.PrismaPromise<GetPreorderAggregateType<T>>

    /**
     * Group by Preorder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreorderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreorderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreorderGroupByArgs['orderBy'] }
        : { orderBy?: PreorderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreorderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreorderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Preorder model
   */
  readonly fields: PreorderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Preorder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreorderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Preorder model
   */ 
  interface PreorderFieldRefs {
    readonly id: FieldRef<"Preorder", 'String'>
    readonly userId: FieldRef<"Preorder", 'String'>
    readonly packType: FieldRef<"Preorder", 'PackType'>
    readonly quantity: FieldRef<"Preorder", 'Int'>
    readonly status: FieldRef<"Preorder", 'OrderStatus'>
    readonly createdAt: FieldRef<"Preorder", 'DateTime'>
    readonly updatedAt: FieldRef<"Preorder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Preorder findUnique
   */
  export type PreorderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preorder
     */
    select?: PreorderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderInclude<ExtArgs> | null
    /**
     * Filter, which Preorder to fetch.
     */
    where: PreorderWhereUniqueInput
  }

  /**
   * Preorder findUniqueOrThrow
   */
  export type PreorderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preorder
     */
    select?: PreorderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderInclude<ExtArgs> | null
    /**
     * Filter, which Preorder to fetch.
     */
    where: PreorderWhereUniqueInput
  }

  /**
   * Preorder findFirst
   */
  export type PreorderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preorder
     */
    select?: PreorderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderInclude<ExtArgs> | null
    /**
     * Filter, which Preorder to fetch.
     */
    where?: PreorderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preorders to fetch.
     */
    orderBy?: PreorderOrderByWithRelationInput | PreorderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Preorders.
     */
    cursor?: PreorderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preorders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preorders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Preorders.
     */
    distinct?: PreorderScalarFieldEnum | PreorderScalarFieldEnum[]
  }

  /**
   * Preorder findFirstOrThrow
   */
  export type PreorderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preorder
     */
    select?: PreorderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderInclude<ExtArgs> | null
    /**
     * Filter, which Preorder to fetch.
     */
    where?: PreorderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preorders to fetch.
     */
    orderBy?: PreorderOrderByWithRelationInput | PreorderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Preorders.
     */
    cursor?: PreorderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preorders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preorders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Preorders.
     */
    distinct?: PreorderScalarFieldEnum | PreorderScalarFieldEnum[]
  }

  /**
   * Preorder findMany
   */
  export type PreorderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preorder
     */
    select?: PreorderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderInclude<ExtArgs> | null
    /**
     * Filter, which Preorders to fetch.
     */
    where?: PreorderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preorders to fetch.
     */
    orderBy?: PreorderOrderByWithRelationInput | PreorderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Preorders.
     */
    cursor?: PreorderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preorders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preorders.
     */
    skip?: number
    distinct?: PreorderScalarFieldEnum | PreorderScalarFieldEnum[]
  }

  /**
   * Preorder create
   */
  export type PreorderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preorder
     */
    select?: PreorderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderInclude<ExtArgs> | null
    /**
     * The data needed to create a Preorder.
     */
    data: XOR<PreorderCreateInput, PreorderUncheckedCreateInput>
  }

  /**
   * Preorder createMany
   */
  export type PreorderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Preorders.
     */
    data: PreorderCreateManyInput | PreorderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Preorder createManyAndReturn
   */
  export type PreorderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preorder
     */
    select?: PreorderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Preorders.
     */
    data: PreorderCreateManyInput | PreorderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Preorder update
   */
  export type PreorderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preorder
     */
    select?: PreorderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderInclude<ExtArgs> | null
    /**
     * The data needed to update a Preorder.
     */
    data: XOR<PreorderUpdateInput, PreorderUncheckedUpdateInput>
    /**
     * Choose, which Preorder to update.
     */
    where: PreorderWhereUniqueInput
  }

  /**
   * Preorder updateMany
   */
  export type PreorderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Preorders.
     */
    data: XOR<PreorderUpdateManyMutationInput, PreorderUncheckedUpdateManyInput>
    /**
     * Filter which Preorders to update
     */
    where?: PreorderWhereInput
  }

  /**
   * Preorder upsert
   */
  export type PreorderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preorder
     */
    select?: PreorderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderInclude<ExtArgs> | null
    /**
     * The filter to search for the Preorder to update in case it exists.
     */
    where: PreorderWhereUniqueInput
    /**
     * In case the Preorder found by the `where` argument doesn't exist, create a new Preorder with this data.
     */
    create: XOR<PreorderCreateInput, PreorderUncheckedCreateInput>
    /**
     * In case the Preorder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreorderUpdateInput, PreorderUncheckedUpdateInput>
  }

  /**
   * Preorder delete
   */
  export type PreorderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preorder
     */
    select?: PreorderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderInclude<ExtArgs> | null
    /**
     * Filter which Preorder to delete.
     */
    where: PreorderWhereUniqueInput
  }

  /**
   * Preorder deleteMany
   */
  export type PreorderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Preorders to delete
     */
    where?: PreorderWhereInput
  }

  /**
   * Preorder without action
   */
  export type PreorderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preorder
     */
    select?: PreorderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreorderInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    walletAddress: 'walletAddress',
    totalPoints: 'totalPoints',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StyleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    rarity: 'rarity',
    category: 'category',
    imageUrl: 'imageUrl',
    totalPoints: 'totalPoints',
    activationCount: 'activationCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StyleScalarFieldEnum = (typeof StyleScalarFieldEnum)[keyof typeof StyleScalarFieldEnum]


  export const UserStyleScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    styleId: 'styleId',
    serialNumber: 'serialNumber',
    points: 'points',
    mintedAt: 'mintedAt'
  };

  export type UserStyleScalarFieldEnum = (typeof UserStyleScalarFieldEnum)[keyof typeof UserStyleScalarFieldEnum]


  export const ActivationScalarFieldEnum: {
    id: 'id',
    styleId: 'styleId',
    playerId: 'playerId',
    playerName: 'playerName',
    matchId: 'matchId',
    leagueId: 'leagueId',
    points: 'points',
    confidence: 'confidence',
    timestamp: 'timestamp'
  };

  export type ActivationScalarFieldEnum = (typeof ActivationScalarFieldEnum)[keyof typeof ActivationScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    apiId: 'apiId',
    name: 'name',
    team: 'team',
    league: 'league',
    position: 'position'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    apiId: 'apiId',
    homeTeam: 'homeTeam',
    awayTeam: 'awayTeam',
    league: 'league',
    status: 'status',
    startTime: 'startTime',
    processed: 'processed'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const PreorderScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    packType: 'packType',
    quantity: 'quantity',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PreorderScalarFieldEnum = (typeof PreorderScalarFieldEnum)[keyof typeof PreorderScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Rarity'
   */
  export type EnumRarityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rarity'>
    


  /**
   * Reference to a field of type 'Rarity[]'
   */
  export type ListEnumRarityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rarity[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'PackType'
   */
  export type EnumPackTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PackType'>
    


  /**
   * Reference to a field of type 'PackType[]'
   */
  export type ListEnumPackTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PackType[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    walletAddress?: StringNullableFilter<"User"> | string | null
    totalPoints?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    userStyles?: UserStyleListRelationFilter
    preorders?: PreorderListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    walletAddress?: SortOrderInput | SortOrder
    totalPoints?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userStyles?: UserStyleOrderByRelationAggregateInput
    preorders?: PreorderOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    walletAddress?: StringNullableFilter<"User"> | string | null
    totalPoints?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    userStyles?: UserStyleListRelationFilter
    preorders?: PreorderListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    walletAddress?: SortOrderInput | SortOrder
    totalPoints?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    walletAddress?: StringNullableWithAggregatesFilter<"User"> | string | null
    totalPoints?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type StyleWhereInput = {
    AND?: StyleWhereInput | StyleWhereInput[]
    OR?: StyleWhereInput[]
    NOT?: StyleWhereInput | StyleWhereInput[]
    id?: StringFilter<"Style"> | string
    name?: StringFilter<"Style"> | string
    description?: StringFilter<"Style"> | string
    rarity?: EnumRarityFilter<"Style"> | $Enums.Rarity
    category?: StringFilter<"Style"> | string
    imageUrl?: StringNullableFilter<"Style"> | string | null
    totalPoints?: IntFilter<"Style"> | number
    activationCount?: IntFilter<"Style"> | number
    createdAt?: DateTimeFilter<"Style"> | Date | string
    updatedAt?: DateTimeFilter<"Style"> | Date | string
    userStyles?: UserStyleListRelationFilter
    activations?: ActivationListRelationFilter
  }

  export type StyleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rarity?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    totalPoints?: SortOrder
    activationCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userStyles?: UserStyleOrderByRelationAggregateInput
    activations?: ActivationOrderByRelationAggregateInput
  }

  export type StyleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: StyleWhereInput | StyleWhereInput[]
    OR?: StyleWhereInput[]
    NOT?: StyleWhereInput | StyleWhereInput[]
    description?: StringFilter<"Style"> | string
    rarity?: EnumRarityFilter<"Style"> | $Enums.Rarity
    category?: StringFilter<"Style"> | string
    imageUrl?: StringNullableFilter<"Style"> | string | null
    totalPoints?: IntFilter<"Style"> | number
    activationCount?: IntFilter<"Style"> | number
    createdAt?: DateTimeFilter<"Style"> | Date | string
    updatedAt?: DateTimeFilter<"Style"> | Date | string
    userStyles?: UserStyleListRelationFilter
    activations?: ActivationListRelationFilter
  }, "id" | "name">

  export type StyleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rarity?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    totalPoints?: SortOrder
    activationCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StyleCountOrderByAggregateInput
    _avg?: StyleAvgOrderByAggregateInput
    _max?: StyleMaxOrderByAggregateInput
    _min?: StyleMinOrderByAggregateInput
    _sum?: StyleSumOrderByAggregateInput
  }

  export type StyleScalarWhereWithAggregatesInput = {
    AND?: StyleScalarWhereWithAggregatesInput | StyleScalarWhereWithAggregatesInput[]
    OR?: StyleScalarWhereWithAggregatesInput[]
    NOT?: StyleScalarWhereWithAggregatesInput | StyleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Style"> | string
    name?: StringWithAggregatesFilter<"Style"> | string
    description?: StringWithAggregatesFilter<"Style"> | string
    rarity?: EnumRarityWithAggregatesFilter<"Style"> | $Enums.Rarity
    category?: StringWithAggregatesFilter<"Style"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Style"> | string | null
    totalPoints?: IntWithAggregatesFilter<"Style"> | number
    activationCount?: IntWithAggregatesFilter<"Style"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Style"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Style"> | Date | string
  }

  export type UserStyleWhereInput = {
    AND?: UserStyleWhereInput | UserStyleWhereInput[]
    OR?: UserStyleWhereInput[]
    NOT?: UserStyleWhereInput | UserStyleWhereInput[]
    id?: StringFilter<"UserStyle"> | string
    userId?: StringFilter<"UserStyle"> | string
    styleId?: StringFilter<"UserStyle"> | string
    serialNumber?: IntNullableFilter<"UserStyle"> | number | null
    points?: IntFilter<"UserStyle"> | number
    mintedAt?: DateTimeFilter<"UserStyle"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    style?: XOR<StyleRelationFilter, StyleWhereInput>
  }

  export type UserStyleOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    styleId?: SortOrder
    serialNumber?: SortOrderInput | SortOrder
    points?: SortOrder
    mintedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    style?: StyleOrderByWithRelationInput
  }

  export type UserStyleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_styleId_serialNumber?: UserStyleUserIdStyleIdSerialNumberCompoundUniqueInput
    AND?: UserStyleWhereInput | UserStyleWhereInput[]
    OR?: UserStyleWhereInput[]
    NOT?: UserStyleWhereInput | UserStyleWhereInput[]
    userId?: StringFilter<"UserStyle"> | string
    styleId?: StringFilter<"UserStyle"> | string
    serialNumber?: IntNullableFilter<"UserStyle"> | number | null
    points?: IntFilter<"UserStyle"> | number
    mintedAt?: DateTimeFilter<"UserStyle"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    style?: XOR<StyleRelationFilter, StyleWhereInput>
  }, "id" | "userId_styleId_serialNumber">

  export type UserStyleOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    styleId?: SortOrder
    serialNumber?: SortOrderInput | SortOrder
    points?: SortOrder
    mintedAt?: SortOrder
    _count?: UserStyleCountOrderByAggregateInput
    _avg?: UserStyleAvgOrderByAggregateInput
    _max?: UserStyleMaxOrderByAggregateInput
    _min?: UserStyleMinOrderByAggregateInput
    _sum?: UserStyleSumOrderByAggregateInput
  }

  export type UserStyleScalarWhereWithAggregatesInput = {
    AND?: UserStyleScalarWhereWithAggregatesInput | UserStyleScalarWhereWithAggregatesInput[]
    OR?: UserStyleScalarWhereWithAggregatesInput[]
    NOT?: UserStyleScalarWhereWithAggregatesInput | UserStyleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserStyle"> | string
    userId?: StringWithAggregatesFilter<"UserStyle"> | string
    styleId?: StringWithAggregatesFilter<"UserStyle"> | string
    serialNumber?: IntNullableWithAggregatesFilter<"UserStyle"> | number | null
    points?: IntWithAggregatesFilter<"UserStyle"> | number
    mintedAt?: DateTimeWithAggregatesFilter<"UserStyle"> | Date | string
  }

  export type ActivationWhereInput = {
    AND?: ActivationWhereInput | ActivationWhereInput[]
    OR?: ActivationWhereInput[]
    NOT?: ActivationWhereInput | ActivationWhereInput[]
    id?: StringFilter<"Activation"> | string
    styleId?: StringFilter<"Activation"> | string
    playerId?: StringFilter<"Activation"> | string
    playerName?: StringFilter<"Activation"> | string
    matchId?: StringFilter<"Activation"> | string
    leagueId?: StringFilter<"Activation"> | string
    points?: IntFilter<"Activation"> | number
    confidence?: FloatFilter<"Activation"> | number
    timestamp?: DateTimeFilter<"Activation"> | Date | string
    style?: XOR<StyleRelationFilter, StyleWhereInput>
  }

  export type ActivationOrderByWithRelationInput = {
    id?: SortOrder
    styleId?: SortOrder
    playerId?: SortOrder
    playerName?: SortOrder
    matchId?: SortOrder
    leagueId?: SortOrder
    points?: SortOrder
    confidence?: SortOrder
    timestamp?: SortOrder
    style?: StyleOrderByWithRelationInput
  }

  export type ActivationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivationWhereInput | ActivationWhereInput[]
    OR?: ActivationWhereInput[]
    NOT?: ActivationWhereInput | ActivationWhereInput[]
    styleId?: StringFilter<"Activation"> | string
    playerId?: StringFilter<"Activation"> | string
    playerName?: StringFilter<"Activation"> | string
    matchId?: StringFilter<"Activation"> | string
    leagueId?: StringFilter<"Activation"> | string
    points?: IntFilter<"Activation"> | number
    confidence?: FloatFilter<"Activation"> | number
    timestamp?: DateTimeFilter<"Activation"> | Date | string
    style?: XOR<StyleRelationFilter, StyleWhereInput>
  }, "id">

  export type ActivationOrderByWithAggregationInput = {
    id?: SortOrder
    styleId?: SortOrder
    playerId?: SortOrder
    playerName?: SortOrder
    matchId?: SortOrder
    leagueId?: SortOrder
    points?: SortOrder
    confidence?: SortOrder
    timestamp?: SortOrder
    _count?: ActivationCountOrderByAggregateInput
    _avg?: ActivationAvgOrderByAggregateInput
    _max?: ActivationMaxOrderByAggregateInput
    _min?: ActivationMinOrderByAggregateInput
    _sum?: ActivationSumOrderByAggregateInput
  }

  export type ActivationScalarWhereWithAggregatesInput = {
    AND?: ActivationScalarWhereWithAggregatesInput | ActivationScalarWhereWithAggregatesInput[]
    OR?: ActivationScalarWhereWithAggregatesInput[]
    NOT?: ActivationScalarWhereWithAggregatesInput | ActivationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Activation"> | string
    styleId?: StringWithAggregatesFilter<"Activation"> | string
    playerId?: StringWithAggregatesFilter<"Activation"> | string
    playerName?: StringWithAggregatesFilter<"Activation"> | string
    matchId?: StringWithAggregatesFilter<"Activation"> | string
    leagueId?: StringWithAggregatesFilter<"Activation"> | string
    points?: IntWithAggregatesFilter<"Activation"> | number
    confidence?: FloatWithAggregatesFilter<"Activation"> | number
    timestamp?: DateTimeWithAggregatesFilter<"Activation"> | Date | string
  }

  export type PlayerWhereInput = {
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    id?: StringFilter<"Player"> | string
    apiId?: StringFilter<"Player"> | string
    name?: StringFilter<"Player"> | string
    team?: StringFilter<"Player"> | string
    league?: StringFilter<"Player"> | string
    position?: StringFilter<"Player"> | string
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    apiId?: SortOrder
    name?: SortOrder
    team?: SortOrder
    league?: SortOrder
    position?: SortOrder
  }

  export type PlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    apiId?: string
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    name?: StringFilter<"Player"> | string
    team?: StringFilter<"Player"> | string
    league?: StringFilter<"Player"> | string
    position?: StringFilter<"Player"> | string
  }, "id" | "apiId">

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    apiId?: SortOrder
    name?: SortOrder
    team?: SortOrder
    league?: SortOrder
    position?: SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    OR?: PlayerScalarWhereWithAggregatesInput[]
    NOT?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Player"> | string
    apiId?: StringWithAggregatesFilter<"Player"> | string
    name?: StringWithAggregatesFilter<"Player"> | string
    team?: StringWithAggregatesFilter<"Player"> | string
    league?: StringWithAggregatesFilter<"Player"> | string
    position?: StringWithAggregatesFilter<"Player"> | string
  }

  export type MatchWhereInput = {
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    id?: StringFilter<"Match"> | string
    apiId?: StringFilter<"Match"> | string
    homeTeam?: StringFilter<"Match"> | string
    awayTeam?: StringFilter<"Match"> | string
    league?: StringFilter<"Match"> | string
    status?: StringFilter<"Match"> | string
    startTime?: DateTimeFilter<"Match"> | Date | string
    processed?: BoolFilter<"Match"> | boolean
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    apiId?: SortOrder
    homeTeam?: SortOrder
    awayTeam?: SortOrder
    league?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    processed?: SortOrder
  }

  export type MatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    apiId?: string
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    homeTeam?: StringFilter<"Match"> | string
    awayTeam?: StringFilter<"Match"> | string
    league?: StringFilter<"Match"> | string
    status?: StringFilter<"Match"> | string
    startTime?: DateTimeFilter<"Match"> | Date | string
    processed?: BoolFilter<"Match"> | boolean
  }, "id" | "apiId">

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    apiId?: SortOrder
    homeTeam?: SortOrder
    awayTeam?: SortOrder
    league?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    processed?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    OR?: MatchScalarWhereWithAggregatesInput[]
    NOT?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Match"> | string
    apiId?: StringWithAggregatesFilter<"Match"> | string
    homeTeam?: StringWithAggregatesFilter<"Match"> | string
    awayTeam?: StringWithAggregatesFilter<"Match"> | string
    league?: StringWithAggregatesFilter<"Match"> | string
    status?: StringWithAggregatesFilter<"Match"> | string
    startTime?: DateTimeWithAggregatesFilter<"Match"> | Date | string
    processed?: BoolWithAggregatesFilter<"Match"> | boolean
  }

  export type PreorderWhereInput = {
    AND?: PreorderWhereInput | PreorderWhereInput[]
    OR?: PreorderWhereInput[]
    NOT?: PreorderWhereInput | PreorderWhereInput[]
    id?: StringFilter<"Preorder"> | string
    userId?: StringFilter<"Preorder"> | string
    packType?: EnumPackTypeFilter<"Preorder"> | $Enums.PackType
    quantity?: IntFilter<"Preorder"> | number
    status?: EnumOrderStatusFilter<"Preorder"> | $Enums.OrderStatus
    createdAt?: DateTimeFilter<"Preorder"> | Date | string
    updatedAt?: DateTimeFilter<"Preorder"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PreorderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    packType?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PreorderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PreorderWhereInput | PreorderWhereInput[]
    OR?: PreorderWhereInput[]
    NOT?: PreorderWhereInput | PreorderWhereInput[]
    userId?: StringFilter<"Preorder"> | string
    packType?: EnumPackTypeFilter<"Preorder"> | $Enums.PackType
    quantity?: IntFilter<"Preorder"> | number
    status?: EnumOrderStatusFilter<"Preorder"> | $Enums.OrderStatus
    createdAt?: DateTimeFilter<"Preorder"> | Date | string
    updatedAt?: DateTimeFilter<"Preorder"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type PreorderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    packType?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PreorderCountOrderByAggregateInput
    _avg?: PreorderAvgOrderByAggregateInput
    _max?: PreorderMaxOrderByAggregateInput
    _min?: PreorderMinOrderByAggregateInput
    _sum?: PreorderSumOrderByAggregateInput
  }

  export type PreorderScalarWhereWithAggregatesInput = {
    AND?: PreorderScalarWhereWithAggregatesInput | PreorderScalarWhereWithAggregatesInput[]
    OR?: PreorderScalarWhereWithAggregatesInput[]
    NOT?: PreorderScalarWhereWithAggregatesInput | PreorderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Preorder"> | string
    userId?: StringWithAggregatesFilter<"Preorder"> | string
    packType?: EnumPackTypeWithAggregatesFilter<"Preorder"> | $Enums.PackType
    quantity?: IntWithAggregatesFilter<"Preorder"> | number
    status?: EnumOrderStatusWithAggregatesFilter<"Preorder"> | $Enums.OrderStatus
    createdAt?: DateTimeWithAggregatesFilter<"Preorder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Preorder"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    walletAddress?: string | null
    totalPoints?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userStyles?: UserStyleCreateNestedManyWithoutUserInput
    preorders?: PreorderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    walletAddress?: string | null
    totalPoints?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userStyles?: UserStyleUncheckedCreateNestedManyWithoutUserInput
    preorders?: PreorderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userStyles?: UserStyleUpdateManyWithoutUserNestedInput
    preorders?: PreorderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userStyles?: UserStyleUncheckedUpdateManyWithoutUserNestedInput
    preorders?: PreorderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    password: string
    walletAddress?: string | null
    totalPoints?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StyleCreateInput = {
    id?: string
    name: string
    description: string
    rarity: $Enums.Rarity
    category: string
    imageUrl?: string | null
    totalPoints?: number
    activationCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userStyles?: UserStyleCreateNestedManyWithoutStyleInput
    activations?: ActivationCreateNestedManyWithoutStyleInput
  }

  export type StyleUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    rarity: $Enums.Rarity
    category: string
    imageUrl?: string | null
    totalPoints?: number
    activationCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userStyles?: UserStyleUncheckedCreateNestedManyWithoutStyleInput
    activations?: ActivationUncheckedCreateNestedManyWithoutStyleInput
  }

  export type StyleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    activationCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userStyles?: UserStyleUpdateManyWithoutStyleNestedInput
    activations?: ActivationUpdateManyWithoutStyleNestedInput
  }

  export type StyleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    activationCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userStyles?: UserStyleUncheckedUpdateManyWithoutStyleNestedInput
    activations?: ActivationUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type StyleCreateManyInput = {
    id?: string
    name: string
    description: string
    rarity: $Enums.Rarity
    category: string
    imageUrl?: string | null
    totalPoints?: number
    activationCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StyleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    activationCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StyleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    activationCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStyleCreateInput = {
    id?: string
    serialNumber?: number | null
    points?: number
    mintedAt?: Date | string
    user: UserCreateNestedOneWithoutUserStylesInput
    style: StyleCreateNestedOneWithoutUserStylesInput
  }

  export type UserStyleUncheckedCreateInput = {
    id?: string
    userId: string
    styleId: string
    serialNumber?: number | null
    points?: number
    mintedAt?: Date | string
  }

  export type UserStyleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    mintedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserStylesNestedInput
    style?: StyleUpdateOneRequiredWithoutUserStylesNestedInput
  }

  export type UserStyleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    styleId?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    mintedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStyleCreateManyInput = {
    id?: string
    userId: string
    styleId: string
    serialNumber?: number | null
    points?: number
    mintedAt?: Date | string
  }

  export type UserStyleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    mintedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStyleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    styleId?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    mintedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivationCreateInput = {
    id?: string
    playerId: string
    playerName: string
    matchId: string
    leagueId: string
    points: number
    confidence?: number
    timestamp?: Date | string
    style: StyleCreateNestedOneWithoutActivationsInput
  }

  export type ActivationUncheckedCreateInput = {
    id?: string
    styleId: string
    playerId: string
    playerName: string
    matchId: string
    leagueId: string
    points: number
    confidence?: number
    timestamp?: Date | string
  }

  export type ActivationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    playerName?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    style?: StyleUpdateOneRequiredWithoutActivationsNestedInput
  }

  export type ActivationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    styleId?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    playerName?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivationCreateManyInput = {
    id?: string
    styleId: string
    playerId: string
    playerName: string
    matchId: string
    leagueId: string
    points: number
    confidence?: number
    timestamp?: Date | string
  }

  export type ActivationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    playerName?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    styleId?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    playerName?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerCreateInput = {
    id?: string
    apiId: string
    name: string
    team: string
    league: string
    position: string
  }

  export type PlayerUncheckedCreateInput = {
    id?: string
    apiId: string
    name: string
    team: string
    league: string
    position: string
  }

  export type PlayerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerCreateManyInput = {
    id?: string
    apiId: string
    name: string
    team: string
    league: string
    position: string
  }

  export type PlayerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    team?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
  }

  export type MatchCreateInput = {
    id?: string
    apiId: string
    homeTeam: string
    awayTeam: string
    league: string
    status: string
    startTime: Date | string
    processed?: boolean
  }

  export type MatchUncheckedCreateInput = {
    id?: string
    apiId: string
    homeTeam: string
    awayTeam: string
    league: string
    status: string
    startTime: Date | string
    processed?: boolean
  }

  export type MatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiId?: StringFieldUpdateOperationsInput | string
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    processed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiId?: StringFieldUpdateOperationsInput | string
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    processed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MatchCreateManyInput = {
    id?: string
    apiId: string
    homeTeam: string
    awayTeam: string
    league: string
    status: string
    startTime: Date | string
    processed?: boolean
  }

  export type MatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiId?: StringFieldUpdateOperationsInput | string
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    processed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiId?: StringFieldUpdateOperationsInput | string
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    processed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PreorderCreateInput = {
    id?: string
    packType: $Enums.PackType
    quantity?: number
    status?: $Enums.OrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPreordersInput
  }

  export type PreorderUncheckedCreateInput = {
    id?: string
    userId: string
    packType: $Enums.PackType
    quantity?: number
    status?: $Enums.OrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PreorderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    packType?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPreordersNestedInput
  }

  export type PreorderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    packType?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreorderCreateManyInput = {
    id?: string
    userId: string
    packType: $Enums.PackType
    quantity?: number
    status?: $Enums.OrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PreorderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    packType?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreorderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    packType?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserStyleListRelationFilter = {
    every?: UserStyleWhereInput
    some?: UserStyleWhereInput
    none?: UserStyleWhereInput
  }

  export type PreorderListRelationFilter = {
    every?: PreorderWhereInput
    some?: PreorderWhereInput
    none?: PreorderWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserStyleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PreorderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    walletAddress?: SortOrder
    totalPoints?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    totalPoints?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    walletAddress?: SortOrder
    totalPoints?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    walletAddress?: SortOrder
    totalPoints?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    totalPoints?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumRarityFilter<$PrismaModel = never> = {
    equals?: $Enums.Rarity | EnumRarityFieldRefInput<$PrismaModel>
    in?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumRarityFilter<$PrismaModel> | $Enums.Rarity
  }

  export type ActivationListRelationFilter = {
    every?: ActivationWhereInput
    some?: ActivationWhereInput
    none?: ActivationWhereInput
  }

  export type ActivationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StyleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rarity?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    totalPoints?: SortOrder
    activationCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StyleAvgOrderByAggregateInput = {
    totalPoints?: SortOrder
    activationCount?: SortOrder
  }

  export type StyleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rarity?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    totalPoints?: SortOrder
    activationCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StyleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rarity?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    totalPoints?: SortOrder
    activationCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StyleSumOrderByAggregateInput = {
    totalPoints?: SortOrder
    activationCount?: SortOrder
  }

  export type EnumRarityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rarity | EnumRarityFieldRefInput<$PrismaModel>
    in?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumRarityWithAggregatesFilter<$PrismaModel> | $Enums.Rarity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRarityFilter<$PrismaModel>
    _max?: NestedEnumRarityFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StyleRelationFilter = {
    is?: StyleWhereInput
    isNot?: StyleWhereInput
  }

  export type UserStyleUserIdStyleIdSerialNumberCompoundUniqueInput = {
    userId: string
    styleId: string
    serialNumber: number
  }

  export type UserStyleCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    styleId?: SortOrder
    serialNumber?: SortOrder
    points?: SortOrder
    mintedAt?: SortOrder
  }

  export type UserStyleAvgOrderByAggregateInput = {
    serialNumber?: SortOrder
    points?: SortOrder
  }

  export type UserStyleMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    styleId?: SortOrder
    serialNumber?: SortOrder
    points?: SortOrder
    mintedAt?: SortOrder
  }

  export type UserStyleMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    styleId?: SortOrder
    serialNumber?: SortOrder
    points?: SortOrder
    mintedAt?: SortOrder
  }

  export type UserStyleSumOrderByAggregateInput = {
    serialNumber?: SortOrder
    points?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ActivationCountOrderByAggregateInput = {
    id?: SortOrder
    styleId?: SortOrder
    playerId?: SortOrder
    playerName?: SortOrder
    matchId?: SortOrder
    leagueId?: SortOrder
    points?: SortOrder
    confidence?: SortOrder
    timestamp?: SortOrder
  }

  export type ActivationAvgOrderByAggregateInput = {
    points?: SortOrder
    confidence?: SortOrder
  }

  export type ActivationMaxOrderByAggregateInput = {
    id?: SortOrder
    styleId?: SortOrder
    playerId?: SortOrder
    playerName?: SortOrder
    matchId?: SortOrder
    leagueId?: SortOrder
    points?: SortOrder
    confidence?: SortOrder
    timestamp?: SortOrder
  }

  export type ActivationMinOrderByAggregateInput = {
    id?: SortOrder
    styleId?: SortOrder
    playerId?: SortOrder
    playerName?: SortOrder
    matchId?: SortOrder
    leagueId?: SortOrder
    points?: SortOrder
    confidence?: SortOrder
    timestamp?: SortOrder
  }

  export type ActivationSumOrderByAggregateInput = {
    points?: SortOrder
    confidence?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    apiId?: SortOrder
    name?: SortOrder
    team?: SortOrder
    league?: SortOrder
    position?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    apiId?: SortOrder
    name?: SortOrder
    team?: SortOrder
    league?: SortOrder
    position?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    apiId?: SortOrder
    name?: SortOrder
    team?: SortOrder
    league?: SortOrder
    position?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    apiId?: SortOrder
    homeTeam?: SortOrder
    awayTeam?: SortOrder
    league?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    processed?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    apiId?: SortOrder
    homeTeam?: SortOrder
    awayTeam?: SortOrder
    league?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    processed?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    apiId?: SortOrder
    homeTeam?: SortOrder
    awayTeam?: SortOrder
    league?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    processed?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumPackTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PackType | EnumPackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPackTypeFilter<$PrismaModel> | $Enums.PackType
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type PreorderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    packType?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PreorderAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type PreorderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    packType?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PreorderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    packType?: SortOrder
    quantity?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PreorderSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type EnumPackTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PackType | EnumPackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPackTypeWithAggregatesFilter<$PrismaModel> | $Enums.PackType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPackTypeFilter<$PrismaModel>
    _max?: NestedEnumPackTypeFilter<$PrismaModel>
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type UserStyleCreateNestedManyWithoutUserInput = {
    create?: XOR<UserStyleCreateWithoutUserInput, UserStyleUncheckedCreateWithoutUserInput> | UserStyleCreateWithoutUserInput[] | UserStyleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStyleCreateOrConnectWithoutUserInput | UserStyleCreateOrConnectWithoutUserInput[]
    createMany?: UserStyleCreateManyUserInputEnvelope
    connect?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
  }

  export type PreorderCreateNestedManyWithoutUserInput = {
    create?: XOR<PreorderCreateWithoutUserInput, PreorderUncheckedCreateWithoutUserInput> | PreorderCreateWithoutUserInput[] | PreorderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PreorderCreateOrConnectWithoutUserInput | PreorderCreateOrConnectWithoutUserInput[]
    createMany?: PreorderCreateManyUserInputEnvelope
    connect?: PreorderWhereUniqueInput | PreorderWhereUniqueInput[]
  }

  export type UserStyleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserStyleCreateWithoutUserInput, UserStyleUncheckedCreateWithoutUserInput> | UserStyleCreateWithoutUserInput[] | UserStyleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStyleCreateOrConnectWithoutUserInput | UserStyleCreateOrConnectWithoutUserInput[]
    createMany?: UserStyleCreateManyUserInputEnvelope
    connect?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
  }

  export type PreorderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PreorderCreateWithoutUserInput, PreorderUncheckedCreateWithoutUserInput> | PreorderCreateWithoutUserInput[] | PreorderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PreorderCreateOrConnectWithoutUserInput | PreorderCreateOrConnectWithoutUserInput[]
    createMany?: PreorderCreateManyUserInputEnvelope
    connect?: PreorderWhereUniqueInput | PreorderWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserStyleUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserStyleCreateWithoutUserInput, UserStyleUncheckedCreateWithoutUserInput> | UserStyleCreateWithoutUserInput[] | UserStyleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStyleCreateOrConnectWithoutUserInput | UserStyleCreateOrConnectWithoutUserInput[]
    upsert?: UserStyleUpsertWithWhereUniqueWithoutUserInput | UserStyleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserStyleCreateManyUserInputEnvelope
    set?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    disconnect?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    delete?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    connect?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    update?: UserStyleUpdateWithWhereUniqueWithoutUserInput | UserStyleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserStyleUpdateManyWithWhereWithoutUserInput | UserStyleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserStyleScalarWhereInput | UserStyleScalarWhereInput[]
  }

  export type PreorderUpdateManyWithoutUserNestedInput = {
    create?: XOR<PreorderCreateWithoutUserInput, PreorderUncheckedCreateWithoutUserInput> | PreorderCreateWithoutUserInput[] | PreorderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PreorderCreateOrConnectWithoutUserInput | PreorderCreateOrConnectWithoutUserInput[]
    upsert?: PreorderUpsertWithWhereUniqueWithoutUserInput | PreorderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PreorderCreateManyUserInputEnvelope
    set?: PreorderWhereUniqueInput | PreorderWhereUniqueInput[]
    disconnect?: PreorderWhereUniqueInput | PreorderWhereUniqueInput[]
    delete?: PreorderWhereUniqueInput | PreorderWhereUniqueInput[]
    connect?: PreorderWhereUniqueInput | PreorderWhereUniqueInput[]
    update?: PreorderUpdateWithWhereUniqueWithoutUserInput | PreorderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PreorderUpdateManyWithWhereWithoutUserInput | PreorderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PreorderScalarWhereInput | PreorderScalarWhereInput[]
  }

  export type UserStyleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserStyleCreateWithoutUserInput, UserStyleUncheckedCreateWithoutUserInput> | UserStyleCreateWithoutUserInput[] | UserStyleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStyleCreateOrConnectWithoutUserInput | UserStyleCreateOrConnectWithoutUserInput[]
    upsert?: UserStyleUpsertWithWhereUniqueWithoutUserInput | UserStyleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserStyleCreateManyUserInputEnvelope
    set?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    disconnect?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    delete?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    connect?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    update?: UserStyleUpdateWithWhereUniqueWithoutUserInput | UserStyleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserStyleUpdateManyWithWhereWithoutUserInput | UserStyleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserStyleScalarWhereInput | UserStyleScalarWhereInput[]
  }

  export type PreorderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PreorderCreateWithoutUserInput, PreorderUncheckedCreateWithoutUserInput> | PreorderCreateWithoutUserInput[] | PreorderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PreorderCreateOrConnectWithoutUserInput | PreorderCreateOrConnectWithoutUserInput[]
    upsert?: PreorderUpsertWithWhereUniqueWithoutUserInput | PreorderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PreorderCreateManyUserInputEnvelope
    set?: PreorderWhereUniqueInput | PreorderWhereUniqueInput[]
    disconnect?: PreorderWhereUniqueInput | PreorderWhereUniqueInput[]
    delete?: PreorderWhereUniqueInput | PreorderWhereUniqueInput[]
    connect?: PreorderWhereUniqueInput | PreorderWhereUniqueInput[]
    update?: PreorderUpdateWithWhereUniqueWithoutUserInput | PreorderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PreorderUpdateManyWithWhereWithoutUserInput | PreorderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PreorderScalarWhereInput | PreorderScalarWhereInput[]
  }

  export type UserStyleCreateNestedManyWithoutStyleInput = {
    create?: XOR<UserStyleCreateWithoutStyleInput, UserStyleUncheckedCreateWithoutStyleInput> | UserStyleCreateWithoutStyleInput[] | UserStyleUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: UserStyleCreateOrConnectWithoutStyleInput | UserStyleCreateOrConnectWithoutStyleInput[]
    createMany?: UserStyleCreateManyStyleInputEnvelope
    connect?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
  }

  export type ActivationCreateNestedManyWithoutStyleInput = {
    create?: XOR<ActivationCreateWithoutStyleInput, ActivationUncheckedCreateWithoutStyleInput> | ActivationCreateWithoutStyleInput[] | ActivationUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: ActivationCreateOrConnectWithoutStyleInput | ActivationCreateOrConnectWithoutStyleInput[]
    createMany?: ActivationCreateManyStyleInputEnvelope
    connect?: ActivationWhereUniqueInput | ActivationWhereUniqueInput[]
  }

  export type UserStyleUncheckedCreateNestedManyWithoutStyleInput = {
    create?: XOR<UserStyleCreateWithoutStyleInput, UserStyleUncheckedCreateWithoutStyleInput> | UserStyleCreateWithoutStyleInput[] | UserStyleUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: UserStyleCreateOrConnectWithoutStyleInput | UserStyleCreateOrConnectWithoutStyleInput[]
    createMany?: UserStyleCreateManyStyleInputEnvelope
    connect?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
  }

  export type ActivationUncheckedCreateNestedManyWithoutStyleInput = {
    create?: XOR<ActivationCreateWithoutStyleInput, ActivationUncheckedCreateWithoutStyleInput> | ActivationCreateWithoutStyleInput[] | ActivationUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: ActivationCreateOrConnectWithoutStyleInput | ActivationCreateOrConnectWithoutStyleInput[]
    createMany?: ActivationCreateManyStyleInputEnvelope
    connect?: ActivationWhereUniqueInput | ActivationWhereUniqueInput[]
  }

  export type EnumRarityFieldUpdateOperationsInput = {
    set?: $Enums.Rarity
  }

  export type UserStyleUpdateManyWithoutStyleNestedInput = {
    create?: XOR<UserStyleCreateWithoutStyleInput, UserStyleUncheckedCreateWithoutStyleInput> | UserStyleCreateWithoutStyleInput[] | UserStyleUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: UserStyleCreateOrConnectWithoutStyleInput | UserStyleCreateOrConnectWithoutStyleInput[]
    upsert?: UserStyleUpsertWithWhereUniqueWithoutStyleInput | UserStyleUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: UserStyleCreateManyStyleInputEnvelope
    set?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    disconnect?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    delete?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    connect?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    update?: UserStyleUpdateWithWhereUniqueWithoutStyleInput | UserStyleUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: UserStyleUpdateManyWithWhereWithoutStyleInput | UserStyleUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: UserStyleScalarWhereInput | UserStyleScalarWhereInput[]
  }

  export type ActivationUpdateManyWithoutStyleNestedInput = {
    create?: XOR<ActivationCreateWithoutStyleInput, ActivationUncheckedCreateWithoutStyleInput> | ActivationCreateWithoutStyleInput[] | ActivationUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: ActivationCreateOrConnectWithoutStyleInput | ActivationCreateOrConnectWithoutStyleInput[]
    upsert?: ActivationUpsertWithWhereUniqueWithoutStyleInput | ActivationUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: ActivationCreateManyStyleInputEnvelope
    set?: ActivationWhereUniqueInput | ActivationWhereUniqueInput[]
    disconnect?: ActivationWhereUniqueInput | ActivationWhereUniqueInput[]
    delete?: ActivationWhereUniqueInput | ActivationWhereUniqueInput[]
    connect?: ActivationWhereUniqueInput | ActivationWhereUniqueInput[]
    update?: ActivationUpdateWithWhereUniqueWithoutStyleInput | ActivationUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: ActivationUpdateManyWithWhereWithoutStyleInput | ActivationUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: ActivationScalarWhereInput | ActivationScalarWhereInput[]
  }

  export type UserStyleUncheckedUpdateManyWithoutStyleNestedInput = {
    create?: XOR<UserStyleCreateWithoutStyleInput, UserStyleUncheckedCreateWithoutStyleInput> | UserStyleCreateWithoutStyleInput[] | UserStyleUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: UserStyleCreateOrConnectWithoutStyleInput | UserStyleCreateOrConnectWithoutStyleInput[]
    upsert?: UserStyleUpsertWithWhereUniqueWithoutStyleInput | UserStyleUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: UserStyleCreateManyStyleInputEnvelope
    set?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    disconnect?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    delete?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    connect?: UserStyleWhereUniqueInput | UserStyleWhereUniqueInput[]
    update?: UserStyleUpdateWithWhereUniqueWithoutStyleInput | UserStyleUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: UserStyleUpdateManyWithWhereWithoutStyleInput | UserStyleUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: UserStyleScalarWhereInput | UserStyleScalarWhereInput[]
  }

  export type ActivationUncheckedUpdateManyWithoutStyleNestedInput = {
    create?: XOR<ActivationCreateWithoutStyleInput, ActivationUncheckedCreateWithoutStyleInput> | ActivationCreateWithoutStyleInput[] | ActivationUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: ActivationCreateOrConnectWithoutStyleInput | ActivationCreateOrConnectWithoutStyleInput[]
    upsert?: ActivationUpsertWithWhereUniqueWithoutStyleInput | ActivationUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: ActivationCreateManyStyleInputEnvelope
    set?: ActivationWhereUniqueInput | ActivationWhereUniqueInput[]
    disconnect?: ActivationWhereUniqueInput | ActivationWhereUniqueInput[]
    delete?: ActivationWhereUniqueInput | ActivationWhereUniqueInput[]
    connect?: ActivationWhereUniqueInput | ActivationWhereUniqueInput[]
    update?: ActivationUpdateWithWhereUniqueWithoutStyleInput | ActivationUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: ActivationUpdateManyWithWhereWithoutStyleInput | ActivationUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: ActivationScalarWhereInput | ActivationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserStylesInput = {
    create?: XOR<UserCreateWithoutUserStylesInput, UserUncheckedCreateWithoutUserStylesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserStylesInput
    connect?: UserWhereUniqueInput
  }

  export type StyleCreateNestedOneWithoutUserStylesInput = {
    create?: XOR<StyleCreateWithoutUserStylesInput, StyleUncheckedCreateWithoutUserStylesInput>
    connectOrCreate?: StyleCreateOrConnectWithoutUserStylesInput
    connect?: StyleWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutUserStylesNestedInput = {
    create?: XOR<UserCreateWithoutUserStylesInput, UserUncheckedCreateWithoutUserStylesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserStylesInput
    upsert?: UserUpsertWithoutUserStylesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserStylesInput, UserUpdateWithoutUserStylesInput>, UserUncheckedUpdateWithoutUserStylesInput>
  }

  export type StyleUpdateOneRequiredWithoutUserStylesNestedInput = {
    create?: XOR<StyleCreateWithoutUserStylesInput, StyleUncheckedCreateWithoutUserStylesInput>
    connectOrCreate?: StyleCreateOrConnectWithoutUserStylesInput
    upsert?: StyleUpsertWithoutUserStylesInput
    connect?: StyleWhereUniqueInput
    update?: XOR<XOR<StyleUpdateToOneWithWhereWithoutUserStylesInput, StyleUpdateWithoutUserStylesInput>, StyleUncheckedUpdateWithoutUserStylesInput>
  }

  export type StyleCreateNestedOneWithoutActivationsInput = {
    create?: XOR<StyleCreateWithoutActivationsInput, StyleUncheckedCreateWithoutActivationsInput>
    connectOrCreate?: StyleCreateOrConnectWithoutActivationsInput
    connect?: StyleWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StyleUpdateOneRequiredWithoutActivationsNestedInput = {
    create?: XOR<StyleCreateWithoutActivationsInput, StyleUncheckedCreateWithoutActivationsInput>
    connectOrCreate?: StyleCreateOrConnectWithoutActivationsInput
    upsert?: StyleUpsertWithoutActivationsInput
    connect?: StyleWhereUniqueInput
    update?: XOR<XOR<StyleUpdateToOneWithWhereWithoutActivationsInput, StyleUpdateWithoutActivationsInput>, StyleUncheckedUpdateWithoutActivationsInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserCreateNestedOneWithoutPreordersInput = {
    create?: XOR<UserCreateWithoutPreordersInput, UserUncheckedCreateWithoutPreordersInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreordersInput
    connect?: UserWhereUniqueInput
  }

  export type EnumPackTypeFieldUpdateOperationsInput = {
    set?: $Enums.PackType
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type UserUpdateOneRequiredWithoutPreordersNestedInput = {
    create?: XOR<UserCreateWithoutPreordersInput, UserUncheckedCreateWithoutPreordersInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreordersInput
    upsert?: UserUpsertWithoutPreordersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPreordersInput, UserUpdateWithoutPreordersInput>, UserUncheckedUpdateWithoutPreordersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumRarityFilter<$PrismaModel = never> = {
    equals?: $Enums.Rarity | EnumRarityFieldRefInput<$PrismaModel>
    in?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumRarityFilter<$PrismaModel> | $Enums.Rarity
  }

  export type NestedEnumRarityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rarity | EnumRarityFieldRefInput<$PrismaModel>
    in?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rarity[] | ListEnumRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumRarityWithAggregatesFilter<$PrismaModel> | $Enums.Rarity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRarityFilter<$PrismaModel>
    _max?: NestedEnumRarityFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumPackTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PackType | EnumPackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPackTypeFilter<$PrismaModel> | $Enums.PackType
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumPackTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PackType | EnumPackTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackType[] | ListEnumPackTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPackTypeWithAggregatesFilter<$PrismaModel> | $Enums.PackType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPackTypeFilter<$PrismaModel>
    _max?: NestedEnumPackTypeFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type UserStyleCreateWithoutUserInput = {
    id?: string
    serialNumber?: number | null
    points?: number
    mintedAt?: Date | string
    style: StyleCreateNestedOneWithoutUserStylesInput
  }

  export type UserStyleUncheckedCreateWithoutUserInput = {
    id?: string
    styleId: string
    serialNumber?: number | null
    points?: number
    mintedAt?: Date | string
  }

  export type UserStyleCreateOrConnectWithoutUserInput = {
    where: UserStyleWhereUniqueInput
    create: XOR<UserStyleCreateWithoutUserInput, UserStyleUncheckedCreateWithoutUserInput>
  }

  export type UserStyleCreateManyUserInputEnvelope = {
    data: UserStyleCreateManyUserInput | UserStyleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PreorderCreateWithoutUserInput = {
    id?: string
    packType: $Enums.PackType
    quantity?: number
    status?: $Enums.OrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PreorderUncheckedCreateWithoutUserInput = {
    id?: string
    packType: $Enums.PackType
    quantity?: number
    status?: $Enums.OrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PreorderCreateOrConnectWithoutUserInput = {
    where: PreorderWhereUniqueInput
    create: XOR<PreorderCreateWithoutUserInput, PreorderUncheckedCreateWithoutUserInput>
  }

  export type PreorderCreateManyUserInputEnvelope = {
    data: PreorderCreateManyUserInput | PreorderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserStyleUpsertWithWhereUniqueWithoutUserInput = {
    where: UserStyleWhereUniqueInput
    update: XOR<UserStyleUpdateWithoutUserInput, UserStyleUncheckedUpdateWithoutUserInput>
    create: XOR<UserStyleCreateWithoutUserInput, UserStyleUncheckedCreateWithoutUserInput>
  }

  export type UserStyleUpdateWithWhereUniqueWithoutUserInput = {
    where: UserStyleWhereUniqueInput
    data: XOR<UserStyleUpdateWithoutUserInput, UserStyleUncheckedUpdateWithoutUserInput>
  }

  export type UserStyleUpdateManyWithWhereWithoutUserInput = {
    where: UserStyleScalarWhereInput
    data: XOR<UserStyleUpdateManyMutationInput, UserStyleUncheckedUpdateManyWithoutUserInput>
  }

  export type UserStyleScalarWhereInput = {
    AND?: UserStyleScalarWhereInput | UserStyleScalarWhereInput[]
    OR?: UserStyleScalarWhereInput[]
    NOT?: UserStyleScalarWhereInput | UserStyleScalarWhereInput[]
    id?: StringFilter<"UserStyle"> | string
    userId?: StringFilter<"UserStyle"> | string
    styleId?: StringFilter<"UserStyle"> | string
    serialNumber?: IntNullableFilter<"UserStyle"> | number | null
    points?: IntFilter<"UserStyle"> | number
    mintedAt?: DateTimeFilter<"UserStyle"> | Date | string
  }

  export type PreorderUpsertWithWhereUniqueWithoutUserInput = {
    where: PreorderWhereUniqueInput
    update: XOR<PreorderUpdateWithoutUserInput, PreorderUncheckedUpdateWithoutUserInput>
    create: XOR<PreorderCreateWithoutUserInput, PreorderUncheckedCreateWithoutUserInput>
  }

  export type PreorderUpdateWithWhereUniqueWithoutUserInput = {
    where: PreorderWhereUniqueInput
    data: XOR<PreorderUpdateWithoutUserInput, PreorderUncheckedUpdateWithoutUserInput>
  }

  export type PreorderUpdateManyWithWhereWithoutUserInput = {
    where: PreorderScalarWhereInput
    data: XOR<PreorderUpdateManyMutationInput, PreorderUncheckedUpdateManyWithoutUserInput>
  }

  export type PreorderScalarWhereInput = {
    AND?: PreorderScalarWhereInput | PreorderScalarWhereInput[]
    OR?: PreorderScalarWhereInput[]
    NOT?: PreorderScalarWhereInput | PreorderScalarWhereInput[]
    id?: StringFilter<"Preorder"> | string
    userId?: StringFilter<"Preorder"> | string
    packType?: EnumPackTypeFilter<"Preorder"> | $Enums.PackType
    quantity?: IntFilter<"Preorder"> | number
    status?: EnumOrderStatusFilter<"Preorder"> | $Enums.OrderStatus
    createdAt?: DateTimeFilter<"Preorder"> | Date | string
    updatedAt?: DateTimeFilter<"Preorder"> | Date | string
  }

  export type UserStyleCreateWithoutStyleInput = {
    id?: string
    serialNumber?: number | null
    points?: number
    mintedAt?: Date | string
    user: UserCreateNestedOneWithoutUserStylesInput
  }

  export type UserStyleUncheckedCreateWithoutStyleInput = {
    id?: string
    userId: string
    serialNumber?: number | null
    points?: number
    mintedAt?: Date | string
  }

  export type UserStyleCreateOrConnectWithoutStyleInput = {
    where: UserStyleWhereUniqueInput
    create: XOR<UserStyleCreateWithoutStyleInput, UserStyleUncheckedCreateWithoutStyleInput>
  }

  export type UserStyleCreateManyStyleInputEnvelope = {
    data: UserStyleCreateManyStyleInput | UserStyleCreateManyStyleInput[]
    skipDuplicates?: boolean
  }

  export type ActivationCreateWithoutStyleInput = {
    id?: string
    playerId: string
    playerName: string
    matchId: string
    leagueId: string
    points: number
    confidence?: number
    timestamp?: Date | string
  }

  export type ActivationUncheckedCreateWithoutStyleInput = {
    id?: string
    playerId: string
    playerName: string
    matchId: string
    leagueId: string
    points: number
    confidence?: number
    timestamp?: Date | string
  }

  export type ActivationCreateOrConnectWithoutStyleInput = {
    where: ActivationWhereUniqueInput
    create: XOR<ActivationCreateWithoutStyleInput, ActivationUncheckedCreateWithoutStyleInput>
  }

  export type ActivationCreateManyStyleInputEnvelope = {
    data: ActivationCreateManyStyleInput | ActivationCreateManyStyleInput[]
    skipDuplicates?: boolean
  }

  export type UserStyleUpsertWithWhereUniqueWithoutStyleInput = {
    where: UserStyleWhereUniqueInput
    update: XOR<UserStyleUpdateWithoutStyleInput, UserStyleUncheckedUpdateWithoutStyleInput>
    create: XOR<UserStyleCreateWithoutStyleInput, UserStyleUncheckedCreateWithoutStyleInput>
  }

  export type UserStyleUpdateWithWhereUniqueWithoutStyleInput = {
    where: UserStyleWhereUniqueInput
    data: XOR<UserStyleUpdateWithoutStyleInput, UserStyleUncheckedUpdateWithoutStyleInput>
  }

  export type UserStyleUpdateManyWithWhereWithoutStyleInput = {
    where: UserStyleScalarWhereInput
    data: XOR<UserStyleUpdateManyMutationInput, UserStyleUncheckedUpdateManyWithoutStyleInput>
  }

  export type ActivationUpsertWithWhereUniqueWithoutStyleInput = {
    where: ActivationWhereUniqueInput
    update: XOR<ActivationUpdateWithoutStyleInput, ActivationUncheckedUpdateWithoutStyleInput>
    create: XOR<ActivationCreateWithoutStyleInput, ActivationUncheckedCreateWithoutStyleInput>
  }

  export type ActivationUpdateWithWhereUniqueWithoutStyleInput = {
    where: ActivationWhereUniqueInput
    data: XOR<ActivationUpdateWithoutStyleInput, ActivationUncheckedUpdateWithoutStyleInput>
  }

  export type ActivationUpdateManyWithWhereWithoutStyleInput = {
    where: ActivationScalarWhereInput
    data: XOR<ActivationUpdateManyMutationInput, ActivationUncheckedUpdateManyWithoutStyleInput>
  }

  export type ActivationScalarWhereInput = {
    AND?: ActivationScalarWhereInput | ActivationScalarWhereInput[]
    OR?: ActivationScalarWhereInput[]
    NOT?: ActivationScalarWhereInput | ActivationScalarWhereInput[]
    id?: StringFilter<"Activation"> | string
    styleId?: StringFilter<"Activation"> | string
    playerId?: StringFilter<"Activation"> | string
    playerName?: StringFilter<"Activation"> | string
    matchId?: StringFilter<"Activation"> | string
    leagueId?: StringFilter<"Activation"> | string
    points?: IntFilter<"Activation"> | number
    confidence?: FloatFilter<"Activation"> | number
    timestamp?: DateTimeFilter<"Activation"> | Date | string
  }

  export type UserCreateWithoutUserStylesInput = {
    id?: string
    email: string
    username: string
    password: string
    walletAddress?: string | null
    totalPoints?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    preorders?: PreorderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserStylesInput = {
    id?: string
    email: string
    username: string
    password: string
    walletAddress?: string | null
    totalPoints?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    preorders?: PreorderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserStylesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserStylesInput, UserUncheckedCreateWithoutUserStylesInput>
  }

  export type StyleCreateWithoutUserStylesInput = {
    id?: string
    name: string
    description: string
    rarity: $Enums.Rarity
    category: string
    imageUrl?: string | null
    totalPoints?: number
    activationCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    activations?: ActivationCreateNestedManyWithoutStyleInput
  }

  export type StyleUncheckedCreateWithoutUserStylesInput = {
    id?: string
    name: string
    description: string
    rarity: $Enums.Rarity
    category: string
    imageUrl?: string | null
    totalPoints?: number
    activationCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    activations?: ActivationUncheckedCreateNestedManyWithoutStyleInput
  }

  export type StyleCreateOrConnectWithoutUserStylesInput = {
    where: StyleWhereUniqueInput
    create: XOR<StyleCreateWithoutUserStylesInput, StyleUncheckedCreateWithoutUserStylesInput>
  }

  export type UserUpsertWithoutUserStylesInput = {
    update: XOR<UserUpdateWithoutUserStylesInput, UserUncheckedUpdateWithoutUserStylesInput>
    create: XOR<UserCreateWithoutUserStylesInput, UserUncheckedCreateWithoutUserStylesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserStylesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserStylesInput, UserUncheckedUpdateWithoutUserStylesInput>
  }

  export type UserUpdateWithoutUserStylesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preorders?: PreorderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserStylesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preorders?: PreorderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StyleUpsertWithoutUserStylesInput = {
    update: XOR<StyleUpdateWithoutUserStylesInput, StyleUncheckedUpdateWithoutUserStylesInput>
    create: XOR<StyleCreateWithoutUserStylesInput, StyleUncheckedCreateWithoutUserStylesInput>
    where?: StyleWhereInput
  }

  export type StyleUpdateToOneWithWhereWithoutUserStylesInput = {
    where?: StyleWhereInput
    data: XOR<StyleUpdateWithoutUserStylesInput, StyleUncheckedUpdateWithoutUserStylesInput>
  }

  export type StyleUpdateWithoutUserStylesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    activationCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activations?: ActivationUpdateManyWithoutStyleNestedInput
  }

  export type StyleUncheckedUpdateWithoutUserStylesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    activationCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activations?: ActivationUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type StyleCreateWithoutActivationsInput = {
    id?: string
    name: string
    description: string
    rarity: $Enums.Rarity
    category: string
    imageUrl?: string | null
    totalPoints?: number
    activationCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userStyles?: UserStyleCreateNestedManyWithoutStyleInput
  }

  export type StyleUncheckedCreateWithoutActivationsInput = {
    id?: string
    name: string
    description: string
    rarity: $Enums.Rarity
    category: string
    imageUrl?: string | null
    totalPoints?: number
    activationCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userStyles?: UserStyleUncheckedCreateNestedManyWithoutStyleInput
  }

  export type StyleCreateOrConnectWithoutActivationsInput = {
    where: StyleWhereUniqueInput
    create: XOR<StyleCreateWithoutActivationsInput, StyleUncheckedCreateWithoutActivationsInput>
  }

  export type StyleUpsertWithoutActivationsInput = {
    update: XOR<StyleUpdateWithoutActivationsInput, StyleUncheckedUpdateWithoutActivationsInput>
    create: XOR<StyleCreateWithoutActivationsInput, StyleUncheckedCreateWithoutActivationsInput>
    where?: StyleWhereInput
  }

  export type StyleUpdateToOneWithWhereWithoutActivationsInput = {
    where?: StyleWhereInput
    data: XOR<StyleUpdateWithoutActivationsInput, StyleUncheckedUpdateWithoutActivationsInput>
  }

  export type StyleUpdateWithoutActivationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    activationCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userStyles?: UserStyleUpdateManyWithoutStyleNestedInput
  }

  export type StyleUncheckedUpdateWithoutActivationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rarity?: EnumRarityFieldUpdateOperationsInput | $Enums.Rarity
    category?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    activationCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userStyles?: UserStyleUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type UserCreateWithoutPreordersInput = {
    id?: string
    email: string
    username: string
    password: string
    walletAddress?: string | null
    totalPoints?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userStyles?: UserStyleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPreordersInput = {
    id?: string
    email: string
    username: string
    password: string
    walletAddress?: string | null
    totalPoints?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userStyles?: UserStyleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPreordersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPreordersInput, UserUncheckedCreateWithoutPreordersInput>
  }

  export type UserUpsertWithoutPreordersInput = {
    update: XOR<UserUpdateWithoutPreordersInput, UserUncheckedUpdateWithoutPreordersInput>
    create: XOR<UserCreateWithoutPreordersInput, UserUncheckedCreateWithoutPreordersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPreordersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPreordersInput, UserUncheckedUpdateWithoutPreordersInput>
  }

  export type UserUpdateWithoutPreordersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userStyles?: UserStyleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPreordersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userStyles?: UserStyleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserStyleCreateManyUserInput = {
    id?: string
    styleId: string
    serialNumber?: number | null
    points?: number
    mintedAt?: Date | string
  }

  export type PreorderCreateManyUserInput = {
    id?: string
    packType: $Enums.PackType
    quantity?: number
    status?: $Enums.OrderStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStyleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    mintedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    style?: StyleUpdateOneRequiredWithoutUserStylesNestedInput
  }

  export type UserStyleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    styleId?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    mintedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStyleUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    styleId?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    mintedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreorderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    packType?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreorderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    packType?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreorderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    packType?: EnumPackTypeFieldUpdateOperationsInput | $Enums.PackType
    quantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStyleCreateManyStyleInput = {
    id?: string
    userId: string
    serialNumber?: number | null
    points?: number
    mintedAt?: Date | string
  }

  export type ActivationCreateManyStyleInput = {
    id?: string
    playerId: string
    playerName: string
    matchId: string
    leagueId: string
    points: number
    confidence?: number
    timestamp?: Date | string
  }

  export type UserStyleUpdateWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    mintedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserStylesNestedInput
  }

  export type UserStyleUncheckedUpdateWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    mintedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStyleUncheckedUpdateManyWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    serialNumber?: NullableIntFieldUpdateOperationsInput | number | null
    points?: IntFieldUpdateOperationsInput | number
    mintedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivationUpdateWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    playerName?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivationUncheckedUpdateWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    playerName?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivationUncheckedUpdateManyWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    playerName?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    leagueId?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StyleCountOutputTypeDefaultArgs instead
     */
    export type StyleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StyleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StyleDefaultArgs instead
     */
    export type StyleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StyleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserStyleDefaultArgs instead
     */
    export type UserStyleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserStyleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivationDefaultArgs instead
     */
    export type ActivationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerDefaultArgs instead
     */
    export type PlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchDefaultArgs instead
     */
    export type MatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PreorderDefaultArgs instead
     */
    export type PreorderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PreorderDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}