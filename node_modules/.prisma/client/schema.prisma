generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique
  password      String
  walletAddress String?
  totalPoints   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userStyles UserStyle[]
  preorders  Preorder[]

  @@map("users")
}

model Style {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String
  rarity          Rarity
  category        String
  imageUrl        String?
  totalPoints     Int      @default(0)
  activationCount Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userStyles  UserStyle[]
  activations Activation[]

  @@map("styles")
}

model UserStyle {
  id           String   @id @default(cuid())
  userId       String
  styleId      String
  serialNumber Int?
  points       Int      @default(0)
  mintedAt     DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  style Style @relation(fields: [styleId], references: [id], onDelete: Cascade)

  @@unique([userId, styleId, serialNumber])
  @@map("user_styles")
}

model Activation {
  id         String   @id @default(cuid())
  styleId    String
  playerId   String
  playerName String
  matchId    String
  leagueId   String
  points     Int
  confidence Float    @default(0.0)
  timestamp  DateTime @default(now())

  // Relations
  style Style @relation(fields: [styleId], references: [id], onDelete: Cascade)

  @@map("activations")
}

model Player {
  id       String @id @default(cuid())
  apiId    String @unique
  name     String
  team     String
  league   String
  position String

  @@map("players")
}

model Match {
  id        String   @id @default(cuid())
  apiId     String   @unique
  homeTeam  String
  awayTeam  String
  league    String
  status    String
  startTime DateTime
  processed Boolean  @default(false)

  @@map("matches")
}

model Preorder {
  id        String      @id @default(cuid())
  userId    String
  packType  PackType
  quantity  Int         @default(1)
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("preorders")
}

enum Rarity {
  COMMON
  RARE
  LEGENDARY
  MYTHIC
}

enum PackType {
  STARTER
  PREMIUM
  LEGENDARY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
